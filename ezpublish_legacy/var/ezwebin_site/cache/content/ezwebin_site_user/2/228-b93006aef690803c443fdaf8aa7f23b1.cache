a:10:{s:7:"content";s:103059:"
<div class="class-blog extrainfo">
    <div class="columns-blog float-break">
        <div class="main-column-position">
            <div class="main-column float-break">
                <div class="border-box">
                <div class="border-tl"><div class="border-tr"><div class="border-tc"></div></div></div>
                <div class="border-ml"><div class="border-mr"><div class="border-mc float-break">
                                                
<div class="content-view-line">
    <div class="class-blog-post float-break">

    <div class="attribute-header">
        <h1><a href="/Mirror/Netgen">Netgen</a></h1>
     </div>
    <div class="attribute-header">
        <h2>> <a href="http://www.netgen.hr/Blog/Changing-class-of-an-existing-object" title="Changing class of an existing object in eZ Publish CMS">Changing class of an existing object in eZ Publish CMS</a></h2>
     </div>

    <div class="attribute-byline">
	    </div>

    

    <div class="attribute-body float-break">
      <p>A good practice in eZ Publish development is to specify the content classes (or content types) at the beginning of the project. But of course in real situations there is a big chance that something needs to be changed at later stage or even after going live. What is great with eZ is that you can easily change content types either by adding new attributes or removing the ones that are not needed. And that ability covers a lot of situation, but not all.</p><p>
For example imagine a following scenario:<br />
- a class is specified and created<br />
- lot objects of that class are created too<br />
- you realize that some of that objects should be of different class<br />- you need to convert some existing objects to that different class&nbsp;</p><p>You can create the second class but the problem is that you already have the content. The swap node feature can help if the number of objects you want to change is low. &nbsp;</p><p>But what to do if you need to change the class for a lot of existing objects? You could create an export/import script, but that takes time too. There was an extension for changing class on existing objects: <a href="http://projects.ez.no/object_content_class_change" target="_self">http://projects.ez.no/object_content_class_change</a> but its outdated (would be nice if someone could upgrade it to PHP5 and eZ 4.2+).</p><p>There is a quick solution but its not for people with weak hearth :)</p>
<ol>

<li>create the new class by copying the old one and note the new class id (e.g. 111)</li>

<li>note all class attribute ids from the old class (e.g. 222,223)</li>

<li>note all class attribute ids from the new class (e.g. 333,334 )</li>

<li>collect object ids for objects you want to change class (e.g. 444,555,777,888)</li>

<li>
go to your database console and verify that you have good ids:<br /><i>select * from ezcontentobject where id in (444,555,777,888)</i></li>

<li>backup your database (just in case)</li>

<li>lock object changes to ensure that nobody changes those objects while doing this (the safest way is to just shutdown the web site or disable login for editors)</li>

<li>
run the following SQL command to update ezcontentobject table:<br /><i>update ezcontentobject set contentclass_id = 111 where id in (444,555,777,888)</i></li>

<li>
run following SQL commands to update ezcontentobject_attribute table for each attribute:<br />
<i>update ezcontentobject_attribute set contentclassattribute_id = 333 where contentobject_id in (444,555,777,888) and contentclassattribute_id = 222;</i><br /><i>update ezcontentobject_attribute set contentclassattribute_id = 334 where contentobject_id in (444,555,777,888) and contentclassattribute_id = 223;</i></li>

<li>Clear the related content caches</li>

<li>Do your changes on the new class</li>

</ol>
<p>
Important thing is that you can “map” attributes only of the same datatype. Otherwise you can break the eZ data model. So the first step is crucial to create the exact same copy of the class. Afterwards, in step 11, you can do changes to your new class.So far I didn't need this to often so there is no script. It would be rather simple to create a script which could hide few steps (like 2., 3., 8., and 9.).&nbsp;<br /><b>DISCLAIMER: No warranty! Backup before doing this!</b></p>
    </div>

    <div class="attribute-url">
	<span>02/20/2012 03:27 pm</span> &nbsp; <a href="http://www.netgen.hr/eng/Blog">www.netgen.hr/eng/Blog</a> &nbsp; <a href="/Mirror/Netgen/Changing-class-of-an-existing-object-in-eZ-Publish-CMS">View mirror of item</a> &nbsp; <a href="http://www.netgen.hr/Blog/Changing-class-of-an-existing-object">View item</a>
    </div>

        

    </div>
</div>                            
<div class="content-view-line">
    <div class="class-blog-post float-break">

    <div class="attribute-header">
        <h1><a href="/Mirror/Netgen">Netgen</a></h1>
     </div>
    <div class="attribute-header">
        <h2>> <a href="http://www.netgenlabs.com/Blog/Changing-class-of-an-existing-object" title="Changing class of an existing object in eZ Publish CMS">Changing class of an existing object in eZ Publish CMS</a></h2>
     </div>

    <div class="attribute-byline">
	    </div>

    

    <div class="attribute-body float-break">
      <p>A good practice in eZ Publish development is to specify the content classes (or content types) at the beginning of the project. But of course in real situations there is a big chance that something needs to be changed at later stage or even after going live. What is great with eZ is that you can easily change content types either by adding new attributes or removing the ones that are not needed. And that ability covers a lot of situation, but not all.</p><p>
For example imagine a following scenario:<br />
- a class is specified and created<br />
- lot objects of that class are created too<br />
- you realize that some of that objects should be of different class<br />- you need to convert some existing objects to that different class&nbsp;</p><p>You can create the second class but the problem is that you already have the content. The swap node feature can help if the number of objects you want to change is low. &nbsp;</p><p>But what to do if you need to change the class for a lot of existing objects? You could create an export/import script, but that takes time too. There was an extension for changing class on existing objects: <a href="http://projects.ez.no/object_content_class_change" target="_self">http://projects.ez.no/object_content_class_change</a> but its outdated (would be nice if someone could upgrade it to PHP5 and eZ 4.2+).</p><p>There is a quick solution but its not for people with weak hearth :)</p>
<ol>

<li>create the new class by copying the old one and note the new class id (e.g. 111)</li>

<li>note all class attribute ids from the old class (e.g. 222,223)</li>

<li>note all class attribute ids from the new class (e.g. 333,334 )</li>

<li>collect object ids for objects you want to change class (e.g. 444,555,777,888)</li>

<li>
go to your database console and verify that you have good ids:<br /><i>select * from ezcontentobject where id in (444,555,777,888)</i></li>

<li>backup your database (just in case)</li>

<li>lock object changes to ensure that nobody changes those objects while doing this (the safest way is to just shutdown the web site or disable login for editors)</li>

<li>
run the following SQL command to update ezcontentobject table:<br /><i>update ezcontentobject set contentclass_id = 111 where id in (444,555,777,888)</i></li>

<li>
run following SQL commands to update ezcontentobject_attribute table for each attribute:<br />
<i>update ezcontentobject_attribute set contentclassattribute_id = 333 where contentobject_id in (444,555,777,888) and contentclassattribute_id = 222;</i><br /><i>update ezcontentobject_attribute set contentclassattribute_id = 334 where contentobject_id in (444,555,777,888) and contentclassattribute_id = 223;</i></li>

<li>Clear the related content caches</li>

<li>Do your changes on the new class</li>

</ol>
<p>
Important thing is that you can “map” attributes only of the same datatype. Otherwise you can break the eZ data model. So the first step is crucial to create the exact same copy of the class. Afterwards, in step 11, you can do changes to your new class.So far I didn't need this to often so there is no script. It would be rather simple to create a script which could hide few steps (like 2., 3., 8., and 9.).&nbsp;<br /><b>DISCLAIMER: No warranty! Backup before doing this!</b></p>
    </div>

    <div class="attribute-url">
	<span>02/20/2012 03:27 pm</span> &nbsp; <a href="http://www.netgen.hr/eng/Blog">www.netgen.hr/eng/Blog</a> &nbsp; <a href="/Mirror/Netgen/Changing-class-of-an-existing-object-in-eZ-Publish-CMS2">View mirror of item</a> &nbsp; <a href="http://www.netgenlabs.com/Blog/Changing-class-of-an-existing-object">View item</a>
    </div>

        

    </div>
</div>                            
<div class="content-view-line">
    <div class="class-blog-post float-break">

    <div class="attribute-header">
        <h1><a href="/Mirror/Netgen">Netgen</a></h1>
     </div>
    <div class="attribute-header">
        <h2>> <a href="http://www.netgen.hr/Blog/Confessions-of-an-apprentice-Creating-a-mobile-channel-siteaccess-in-eZ-Publish" title="Confessions of an apprentice: Creating a mobile channel (siteaccess) in eZ Publish">Confessions of an apprentice: Creating a mobile channel (siteacces ...</a></h2>
     </div>

    <div class="attribute-byline">
	    </div>

    

    <div class="attribute-body float-break">
      <p><b>&nbsp;</b></p><p>Since the last article on this blog was about <a href="http://www.netgen.hr/eng/Blog/Going-mobile-with-eZ-Publish" target="_blank">Going mobile with eZ Publish</a>, I’ll show you how to create a new siteaccess in eZ Publish with an intention of creating a mobile channel. And that’s actually one of the main reasons why eZ Publish is so versatile, since with multiple siteaccesses you can create a site that will cover all of your creative bases.</p><a name="eztoc6637_1" id="eztoc6637_1"></a><h2>Creating a new siteaccess in eZ Publish</h2><a name="eztoc6637_1_1" id="eztoc6637_1_1"></a><h3>What’s a siteaccess anyway?</h3><p>You have probably heard the word siteaccess in the context of eZ Publish programming a lot of times already. But did you stop and consider what this concept actually means? Well, to put it as simple as possible, a siteaccess is a way to handle multiple sites on a single installation of eZ Publish. From a technical standpoint, a siteaccess is just a bunch of INI settings which you set up and then apply necessary changes for these multiple sites. Now, when I say “multiple sites”, you probably think of different content for each site, different design and whatnot. And yes, while you may do stuff like that on a single installation, too, a siteaccess runs deeper than that.</p><p>You see, you handle siteaccesses in your day-to-day operations in eZ Publish already! How can this be? Well, for example, the Administration Interface, the place where all of your content comes together, is a siteaccess. If you have a multilingual site, you are using multiple siteaccesses, each siteaccess representing a language in your installation. It’s just a matter of a common design between all of them which defines the whole look-and-feel throughout your siteaccesses.</p><p>You can even go so far as to create different channels for different types of users. For example, if you have a news portal, and you have a group of users called Journalists, you can create a siteaccess for them which will serve as an editorial interface, but will be adjusted to their particular needs, which is writing articles and putting them in the right context (topic-based). Also, you can create another group of users called, for example, Photographers, and limit them only to the upload of images and editing existing articles so they can fill them up with images, etc.</p><p>Siteaccesses provide us with a possibility to create specialized portions of a site which serves a certain need. In a similar manner, a mobile site based on a large corporate site which was created in eZ Publish serves a certain need, which is delivering content created for the mobile version of our site.</p><p>Siteaccesses come in handy in all of those situations because they are relatively easy to set up and all you have to do then is apply whatever changes you need to them, e.g., a new design, a new order in which the content is output, or just a new language.</p><p>You can even go so far to link each siteaccess to different subdomains of your site so you can have, for example, your main siteaccess in, say, English, www.example.com, your Administration Interface, admin.example.com, your mobile site, mobile.example.com, and, say, the portion of the site in French, french.example.com. And then, after all that, you can create a completely new siteaccess linked to another domain called, e.g., new.example.com, which will actually output a whole different content in a whole new surrounding.</p><p>As far as accessing the website is concerned, eZ Publish has three most commonly used distinct methods of choosing the siteaccess: through the URI, through the host, and through the port. There is a fourth one, servervar, but it is rarely used. The URI is the default and the easiest way to set up your siteaccess. Since the URI is just a part of the URL, all you need to do is add the name of your siteaccess to the main URL (for example: www.example.com/name_of_siteaccess), and the siteaccess matching the URI part will be displayed. Using the host access method is a bit trickier, because you need to set up a subdomain (or subdomains), and the Virtual Host mode on your server. Then you will get the type of example we mentioned earlier (name.example.com). The port access method is linking the various siteaccesses to the ports on your server, so, for example, you can link your main siteaccess to port 80, and the administration siteaccess to port 81. You can even go so far as to combine the URI and host access methods, so that they can both be available to the end-user.</p><p>As you can see, a siteaccess is actually a very versatile tool which makes your daily eZ Publish programming a lot easier to manipulate, and in the end, makes your clients more satisfied because the siteaccess system shortens the time necessary to apply multiple solutions to one installation.</p><a name="eztoc6637_1_2" id="eztoc6637_1_2"></a><h3>How to create a siteaccess</h3><p>All of the siteaccesses on a site are created in the <b>settings</b> folder of our eZ Publish installation. As you probably can tell just by the look of it, the settings folder has a number of INI files, and two folders in it, <b>siteaccess</b> and <b>override</b>. Now, all of your siteaccess-particular settings are located in the <b>siteaccess</b> folder, and all of the settings regarding the whole eZ installation are located in the <b>override</b> folder.</p><p>To create a new siteaccess, go to the <b>mypage/settings/siteaccess</b> folder of your eZ Publish installation and create a new folder here called <b>mobile</b>. We will call it <b>mobile</b> under the assumption that the new channel will handle all of the mobile content for our site.</p><p>The next step is actually telling eZ Publish that we want this mobile folder to be a new siteaccess. For that purpose, we need to set up some settings in the <b>site.ini</b> file. So, go to the <b>/settings/override</b> folder of your installation and open the <b>site.ini.append.php</b> file. In it, you have the relevant settings for your whole site. We are interested in the SiteAccessSettings block. Edit the SiteAccessSettings block of the <b>site.ini.append.php</b> file like so:</p><pre>[SiteAccessSettings]
AvailableSiteAccessList[]=mobile</pre><p>Just to be clear, don’t delete anthing else you might have under this block, just add this new line so you can prepare your installation for a new siteaccess.</p><p>After that, we need some new site settings for the mobile channel. The best way to set up our new siteaccess to use every resource the rest of the siteaccesses use is to copy a <b>site.ini.append.php</b> file from another siteaccess, for example, the most common one, <b>eng</b>. So, we’ll do just that. Go into <b>/settings/siteaccess/eng</b>, copy the <b>site.ini.append.php</b> file and paste it into the <b>/settings/siteaccess/mobile</b> folder. After that, open the new <b>site.ini.append.php</b> file and make the necessary modifications like so:</p><pre>[SiteAccessSettings]
RequireUserLogin=false
RelatedSiteAccessList[]=eng
RelatedSiteAccessList[]=administration
MatchOrder=uri;host
HostMatchMapItems[]
HostMatchMapItems[]=mobile.mypage.com;mobile
[DesignSettings]
SiteDesign=mobile
AdditionalSiteDesignList[]=mydesign
AdditionalSiteDesignList[]=ezwebin
AdditionalSiteDesignList[]=base</pre><p>So, what do we have here? Under the SiteAccessSettings block, we have told eZ Publish that a user doesn’t need a username or password to open the mobile channel. Also, content-wise, we have told eZ Publish that <b>eng</b> and <b>administration</b> will be the related siteaccesses which means that their view cache will be cleared when it is cleared for the current siteaccess. Also, we set up the <b>mobile</b> siteaccess so that it will open if the user inputs two possible addresses in the address bar (mobile.mypage.com or mypage.com/mobile). Of course, that’s assuming that the Virtual Host is set up properly. After that, I have assumed that a mobile channel needs to have a new design, therefore, we have set up a new design called <b>mobile</b> which this siteaccess will use. But, no worries, since it will fall back on the list of designs we already use all over the site if eZ Publish doesn’t find the <b>mobile</b> design.</p><p>Even though we’ve set up almost everything needed in regards to this siteaccess, there is still a few things we need to do. For example, with these settings we have created a new siteaccess, but it still won’t be visible in the Quick Settings of the Administration Interface. To make it visible, we need to do one last thing in regards to the INI settings. Go into <b>/settings/siteaccess/administration</b> and put your new siteaccess on the RelatedSiteAccess list in the <b>site.ini.append.php</b> here, too. After that, access your Administration Interface through the browser, and clear the INI cache in the Global (override) siteaccess. After that, your new siteaccess will be visible in your Administration.</p>
<div class="object-left"><div class="content-view-embed">
<div class="class-image">
    <div class="attribute-image">

    
        
    
                                                                                                                                            <img src="http://www.netgen.hr/var/ezflow_site/storage/images/media/images/mobile-siteaccess-visible-under-quick-settings/6646-1-cro-HR/Mobile-siteaccess-visible-under-Quick-settings_medium.jpg" width="187" height="284"  style="border: 0px solid ;" alt="Mobile siteaccess visible under Quick settings" title="Mobile siteaccess visible under Quick settings" />
            
    
    
    </div>

                                        <div class="attribute-caption" style="width: 187px">
                
<p>Mobile siteaccess visible under Quick settings</p> </div>
         </div>
</div>
</div><p>&nbsp;</p>
<div class="object-left"><div class="content-view-embed">
<div class="class-image">
    <div class="attribute-image">

    
        
    
                                                                                                                                            <img src="http://www.netgen.hr/var/ezflow_site/storage/images/media/images/mobile-siteaccess-visible-among-other-siteaccesses/6650-1-cro-HR/Mobile-siteaccess-visible-among-other-siteaccesses_medium.jpg" width="177" height="290"  style="border: 0px solid ;" alt="Mobile siteaccess visible among other siteaccesses" title="Mobile siteaccess visible among other siteaccesses" />
            
    
    
    </div>

                                        <div class="attribute-caption" style="width: 177px">
                
<p>Mobile siteaccess visible among other siteaccesses</p> </div>
         </div>
</div>
</div><p>But, wait! We need to do one more thing. Currently, the way we set up our new siteaccess, no Anonymous User will be able to access it. Why is that? Well, the RequireUserLogin works as a global switch to determine if a user needs to supply credentials to gain entry into a siteaccess. But that doesn’t mean that Anonymous Users really have access to the mobile channel. That’s what Roles and Policies are for. You see, eZ Publish checks two things: does a user need to supply credentials to enter a siteaccess (RequireUserLogin), and can a user truly enter the siteaccess (Roles and Policies). If one of those isn’t set up properly, Anonymous Users won’t be able to view our mobile site. Which is why we need to grant them this privilege. Let’s do that, shall we?</p><p>Go to the User Accounts tab in the Administration Interface and click on Roles And Policies. Click on the Anonymous role, and click on Edit. After that, add a new policy. In the Wizard, under Module, click on user, under Function, click on login, and then click on Grant limited access. After that, you’ll get a list of all the siteaccesses of the site. Choose mobile, and click on OK. after that, click on Save.</p><p>Now, try to access your site. If you have set up your site locally go to: mypage/mobile, and see if it outputs any errors. If it doesn’t, you have set up your siteaccess, and if it does, go through all of the previously described steps and see if you’ve set everything up properly.</p><p>To sum up, setting up a new siteaccess means simply setting up new INI settings and clearing the cache. eZ Publish does everything else for you. And that is the beauty of the siteaccess system. You don’t need to do much to set it up, but it represents, as Igor wrote in the previous article, such a simple way to setup radically different user experiences that can provide you with new possibilities: a new design, a new language, some custom settings, or even a whole new content (a new database and storage). The siteaccess engine is powerful and easy, and that’s what makes it a good practice.</p><p>
Until next time, I wish you happy coding,<br />Tomislav</p>
    </div>

    <div class="attribute-url">
	<span>01/26/2012 08:00 am</span> &nbsp; <a href="http://www.netgen.hr/eng/Blog">www.netgen.hr/eng/Blog</a> &nbsp; <a href="/Mirror/Netgen/Confessions-of-an-apprentice-Creating-a-mobile-channel-siteaccess-in-eZ-Publish">View mirror of item</a> &nbsp; <a href="http://www.netgen.hr/Blog/Confessions-of-an-apprentice-Creating-a-mobile-channel-siteaccess-in-eZ-Publish">View item</a>
    </div>

        

    </div>
</div>                            
<div class="content-view-line">
    <div class="class-blog-post float-break">

    <div class="attribute-header">
        <h1><a href="/Mirror/Netgen">Netgen</a></h1>
     </div>
    <div class="attribute-header">
        <h2>> <a href="http://www.netgenlabs.com/Blog/Confessions-of-an-apprentice-Creating-a-mobile-channel-siteaccess-in-eZ-Publish" title="Confessions of an apprentice: Creating a mobile channel (siteaccess) in eZ Publish">Confessions of an apprentice: Creating a mobile channel (siteacces ...</a></h2>
     </div>

    <div class="attribute-byline">
	    </div>

    

    <div class="attribute-body float-break">
      <p><b>&nbsp;</b></p><p>Since the last article on this blog was about <a href="http://www.netgen.hr/eng/Blog/Going-mobile-with-eZ-Publish" target="_blank">Going mobile with eZ Publish</a>, I’ll show you how to create a new siteaccess in eZ Publish with an intention of creating a mobile channel. And that’s actually one of the main reasons why eZ Publish is so versatile, since with multiple siteaccesses you can create a site that will cover all of your creative bases.</p><a name="eztoc6637_1" id="eztoc6637_1"></a><h2>Creating a new siteaccess in eZ Publish</h2><a name="eztoc6637_1_1" id="eztoc6637_1_1"></a><h3>What’s a siteaccess anyway?</h3><p>You have probably heard the word siteaccess in the context of eZ Publish programming a lot of times already. But did you stop and consider what this concept actually means? Well, to put it as simple as possible, a siteaccess is a way to handle multiple sites on a single installation of eZ Publish. From a technical standpoint, a siteaccess is just a bunch of INI settings which you set up and then apply necessary changes for these multiple sites. Now, when I say “multiple sites”, you probably think of different content for each site, different design and whatnot. And yes, while you may do stuff like that on a single installation, too, a siteaccess runs deeper than that.</p><p>You see, you handle siteaccesses in your day-to-day operations in eZ Publish already! How can this be? Well, for example, the Administration Interface, the place where all of your content comes together, is a siteaccess. If you have a multilingual site, you are using multiple siteaccesses, each siteaccess representing a language in your installation. It’s just a matter of a common design between all of them which defines the whole look-and-feel throughout your siteaccesses.</p><p>You can even go so far as to create different channels for different types of users. For example, if you have a news portal, and you have a group of users called Journalists, you can create a siteaccess for them which will serve as an editorial interface, but will be adjusted to their particular needs, which is writing articles and putting them in the right context (topic-based). Also, you can create another group of users called, for example, Photographers, and limit them only to the upload of images and editing existing articles so they can fill them up with images, etc.</p><p>Siteaccesses provide us with a possibility to create specialized portions of a site which serves a certain need. In a similar manner, a mobile site based on a large corporate site which was created in eZ Publish serves a certain need, which is delivering content created for the mobile version of our site.</p><p>Siteaccesses come in handy in all of those situations because they are relatively easy to set up and all you have to do then is apply whatever changes you need to them, e.g., a new design, a new order in which the content is output, or just a new language.</p><p>You can even go so far to link each siteaccess to different subdomains of your site so you can have, for example, your main siteaccess in, say, English, www.example.com, your Administration Interface, admin.example.com, your mobile site, mobile.example.com, and, say, the portion of the site in French, french.example.com. And then, after all that, you can create a completely new siteaccess linked to another domain called, e.g., new.example.com, which will actually output a whole different content in a whole new surrounding.</p><p>As far as accessing the website is concerned, eZ Publish has three most commonly used distinct methods of choosing the siteaccess: through the URI, through the host, and through the port. There is a fourth one, servervar, but it is rarely used. The URI is the default and the easiest way to set up your siteaccess. Since the URI is just a part of the URL, all you need to do is add the name of your siteaccess to the main URL (for example: www.example.com/name_of_siteaccess), and the siteaccess matching the URI part will be displayed. Using the host access method is a bit trickier, because you need to set up a subdomain (or subdomains), and the Virtual Host mode on your server. Then you will get the type of example we mentioned earlier (name.example.com). The port access method is linking the various siteaccesses to the ports on your server, so, for example, you can link your main siteaccess to port 80, and the administration siteaccess to port 81. You can even go so far as to combine the URI and host access methods, so that they can both be available to the end-user.</p><p>As you can see, a siteaccess is actually a very versatile tool which makes your daily eZ Publish programming a lot easier to manipulate, and in the end, makes your clients more satisfied because the siteaccess system shortens the time necessary to apply multiple solutions to one installation.</p><a name="eztoc6637_1_2" id="eztoc6637_1_2"></a><h3>How to create a siteaccess</h3><p>All of the siteaccesses on a site are created in the <b>settings</b> folder of our eZ Publish installation. As you probably can tell just by the look of it, the settings folder has a number of INI files, and two folders in it, <b>siteaccess</b> and <b>override</b>. Now, all of your siteaccess-particular settings are located in the <b>siteaccess</b> folder, and all of the settings regarding the whole eZ installation are located in the <b>override</b> folder.</p><p>To create a new siteaccess, go to the <b>mypage/settings/siteaccess</b> folder of your eZ Publish installation and create a new folder here called <b>mobile</b>. We will call it <b>mobile</b> under the assumption that the new channel will handle all of the mobile content for our site.</p><p>The next step is actually telling eZ Publish that we want this mobile folder to be a new siteaccess. For that purpose, we need to set up some settings in the <b>site.ini</b> file. So, go to the <b>/settings/override</b> folder of your installation and open the <b>site.ini.append.php</b> file. In it, you have the relevant settings for your whole site. We are interested in the SiteAccessSettings block. Edit the SiteAccessSettings block of the <b>site.ini.append.php</b> file like so:</p>	<pre class="ezini" style="font-family:monospace;"><span><span style="">[</span></span>SiteAccessSettings<span style="">]</span>
<span style="color: #000099;">AvailableSiteAccessList</span><span style="">[</span><span style="">]</span><span style="color: #000066; font-weight:bold;">=</span><span style="color: #660066;">mobile</span></pre><p>Just to be clear, don’t delete anthing else you might have under this block, just add this new line so you can prepare your installation for a new siteaccess.</p><p>After that, we need some new site settings for the mobile channel. The best way to set up our new siteaccess to use every resource the rest of the siteaccesses use is to copy a <b>site.ini.append.php</b> file from another siteaccess, for example, the most common one, <b>eng</b>. So, we’ll do just that. Go into <b>/settings/siteaccess/eng</b>, copy the <b>site.ini.append.php</b> file and paste it into the <b>/settings/siteaccess/mobile</b> folder. After that, open the new <b>site.ini.append.php</b> file and make the necessary modifications like so:</p>	<pre class="ezini" style="font-family:monospace;"><span><span style="">[</span></span>SiteAccessSettings<span style="">]</span>
<span style="color: #000099;">RequireUserLogin</span><span style="color: #000066; font-weight:bold;">=</span><span style="color: #660066;">false</span>
<span style="color: #000099;">RelatedSiteAccessList</span><span style="">[</span><span style="">]</span><span style="color: #000066; font-weight:bold;">=</span><span style="color: #660066;">eng</span>
<span style="color: #000099;">RelatedSiteAccessList</span><span style="">[</span><span style="">]</span><span style="color: #000066; font-weight:bold;">=</span><span style="color: #660066;">administration</span>
<span style="color: #000099;">MatchOrder</span><span style="color: #000066; font-weight:bold;">=</span><span style="color: #000066; font-weight:bold;"><span style="color: #660066;">uri;host</span></span>
<span style="color: #000099;">HostMatchMapItems</span><span style="">[</span><span style="">]</span>
<span style="color: #000099;">HostMatchMapItems</span><span style="">[</span><span style="">]</span><span style="color: #000066; font-weight:bold;">=</span><span style="color: #000066; font-weight:bold;"><span style="color: #660066;">mobile.mypage.com;mobile</span></span>
<span style="color: #000066; font-weight:bold;"><span style="">[</span>DesignSettings<span style="">]</span></span>
<span style="color: #000099;">SiteDesign</span><span style="color: #000066; font-weight:bold;">=</span><span style="color: #660066;">mobile</span>
<span style="color: #000099;">AdditionalSiteDesignList</span><span style="">[</span><span style="">]</span><span style="color: #000066; font-weight:bold;">=</span><span style="color: #660066;">mydesign</span>
<span style="color: #000099;">AdditionalSiteDesignList</span><span style="">[</span><span style="">]</span><span style="color: #000066; font-weight:bold;">=</span><span style="color: #660066;">ezwebin</span>
<span style="color: #000099;">AdditionalSiteDesignList</span><span style="">[</span><span style="">]</span><span style="color: #000066; font-weight:bold;">=</span><span style="color: #660066;">base</span></pre><p>So, what do we have here? Under the SiteAccessSettings block, we have told eZ Publish that a user doesn’t need a username or password to open the mobile channel. Also, content-wise, we have told eZ Publish that <b>eng</b> and <b>administration</b> will be the related siteaccesses which means that their view cache will be cleared when it is cleared for the current siteaccess. Also, we set up the <b>mobile</b> siteaccess so that it will open if the user inputs two possible addresses in the address bar (mobile.mypage.com or mypage.com/mobile). Of course, that’s assuming that the Virtual Host is set up properly. After that, I have assumed that a mobile channel needs to have a new design, therefore, we have set up a new design called <b>mobile</b> which this siteaccess will use. But, no worries, since it will fall back on the list of designs we already use all over the site if eZ Publish doesn’t find the <b>mobile</b> design.</p><p>Even though we’ve set up almost everything needed in regards to this siteaccess, there is still a few things we need to do. For example, with these settings we have created a new siteaccess, but it still won’t be visible in the Quick Settings of the Administration Interface. To make it visible, we need to do one last thing in regards to the INI settings. Go into <b>/settings/siteaccess/administration</b> and put your new siteaccess on the RelatedSiteAccess list in the <b>site.ini.append.php</b> here, too. After that, access your Administration Interface through the browser, and clear the INI cache in the Global (override) siteaccess. After that, your new siteaccess will be visible in your Administration.</p>
<div class="object-left"><div class="content-view-embed">
<div class="class-image">
    <div class="attribute-image">

    
        
    
                                                                                                                                            <img src="http://www.netgenlabs.com/var/ezflow_site/storage/images/media/images/mobile-siteaccess-visible-under-quick-settings/6646-1-cro-HR/Mobile-siteaccess-visible-under-Quick-settings_medium.jpg" width="187" height="284"  style="border: 0px solid ;" alt="Mobile siteaccess visible under Quick settings" title="Mobile siteaccess visible under Quick settings" />
            
    
    
    </div>

                                        <div class="attribute-caption" style="width: 187px">
                
<p>Mobile siteaccess visible under Quick settings</p> </div>
         </div>
</div>
</div><p>&nbsp;</p>
<div class="object-left"><div class="content-view-embed">
<div class="class-image">
    <div class="attribute-image">

    
        
    
                                                                                                                                            <img src="http://www.netgenlabs.com/var/ezflow_site/storage/images/media/images/mobile-siteaccess-visible-among-other-siteaccesses/6650-1-cro-HR/Mobile-siteaccess-visible-among-other-siteaccesses_medium.jpg" width="177" height="290"  style="border: 0px solid ;" alt="Mobile siteaccess visible among other siteaccesses" title="Mobile siteaccess visible among other siteaccesses" />
            
    
    
    </div>

                                        <div class="attribute-caption" style="width: 177px">
                
<p>Mobile siteaccess visible among other siteaccesses</p> </div>
         </div>
</div>
</div><p>But, wait! We need to do one more thing. Currently, the way we set up our new siteaccess, no Anonymous User will be able to access it. Why is that? Well, the RequireUserLogin works as a global switch to determine if a user needs to supply credentials to gain entry into a siteaccess. But that doesn’t mean that Anonymous Users really have access to the mobile channel. That’s what Roles and Policies are for. You see, eZ Publish checks two things: does a user need to supply credentials to enter a siteaccess (RequireUserLogin), and can a user truly enter the siteaccess (Roles and Policies). If one of those isn’t set up properly, Anonymous Users won’t be able to view our mobile site. Which is why we need to grant them this privilege. Let’s do that, shall we?</p><p>Go to the User Accounts tab in the Administration Interface and click on Roles And Policies. Click on the Anonymous role, and click on Edit. After that, add a new policy. In the Wizard, under Module, click on user, under Function, click on login, and then click on Grant limited access. After that, you’ll get a list of all the siteaccesses of the site. Choose mobile, and click on OK. after that, click on Save.</p><p>Now, try to access your site. If you have set up your site locally go to: mypage/mobile, and see if it outputs any errors. If it doesn’t, you have set up your siteaccess, and if it does, go through all of the previously described steps and see if you’ve set everything up properly.</p><p>To sum up, setting up a new siteaccess means simply setting up new INI settings and clearing the cache. eZ Publish does everything else for you. And that is the beauty of the siteaccess system. You don’t need to do much to set it up, but it represents, as Igor wrote in the previous article, such a simple way to setup radically different user experiences that can provide you with new possibilities: a new design, a new language, some custom settings, or even a whole new content (a new database and storage). The siteaccess engine is powerful and easy, and that’s what makes it a good practice.</p><p>
Until next time, I wish you happy coding,<br />Tomislav</p>
    </div>

    <div class="attribute-url">
	<span>01/26/2012 08:00 am</span> &nbsp; <a href="http://www.netgen.hr/eng/Blog">www.netgen.hr/eng/Blog</a> &nbsp; <a href="/Mirror/Netgen/Confessions-of-an-apprentice-Creating-a-mobile-channel-siteaccess-in-eZ-Publish2">View mirror of item</a> &nbsp; <a href="http://www.netgenlabs.com/Blog/Confessions-of-an-apprentice-Creating-a-mobile-channel-siteaccess-in-eZ-Publish">View item</a>
    </div>

        

    </div>
</div>                            
<div class="content-view-line">
    <div class="class-blog-post float-break">

    <div class="attribute-header">
        <h1><a href="/Mirror/Netgen">Netgen</a></h1>
     </div>
    <div class="attribute-header">
        <h2>> <a href="http://www.netgen.hr/Blog/Going-mobile-with-eZ-Publish" title="Going mobile with eZ Publish">Going mobile with eZ Publish</a></h2>
     </div>

    <div class="attribute-byline">
	    </div>

    

    <div class="attribute-body float-break">
      <p>These days, mobile seems to be the mother of all buzzwords in the web development community. The blogosphere is bursting with advices on the best mobile strategy, design community battles with evergrowing number of different devices that are accessing web pages and more and more media creators are pushing their content through different channels and devices. And I think that this buzz is here for a good reason.</p><p>You can trust the reports such as <a href="http://mashable.com/2010/04/13/mobile-web-stats/" target="_self">the Morgan Stanley report (more than a year old)</a>, or you can just take a look around you while sitting in any coffee house, bar or hotel lobby and see the growing number of people staring at the screens of their mobile devices. Mobile web / Internet usage has gained enormous momentum in the last few years and has pushed itself into becoming one of the mainstream ways of consuming the online content.</p><p>In the eZ Publish community, we need to keep up the pace with these changes, and provide our clients with the right solutions for this brave new and mobile world we are living in. I believe we have all the tools needed.</p><p>The main features of eZ Publish that enable us to develop different kinds of mobile solutions are:</p>
<ul>

<li>clean separation of design and content</li>

<li>flexible content model that we can leverage to model the data to our needs and</li>

<li>rich and well-defined APIs that we can use to access the CMS and integrate it with external systems.</li>

</ul>
<p>By utilizing these features eZ Publish developers can choose one or more different approaches for enabling mobile access to the content stored in the CMS.</p><a name="eztoc6608_1" id="eztoc6608_1"></a><h2>Mobile approach no.1: responsive web pages</h2>
<div class="object-left"><div class="content-view-embed">
<div class="class-image">
    <div class="attribute-image">

    
        
    
                                                                                                                                            <img src="http://www.netgen.hr/var/ezflow_site/storage/images/media/images/boston-globe/6617-2-cro-HR/boston-globe_medium.png" width="193" height="290"  style="border: 0px solid ;" alt="Boston Globe" title="Boston Globe" />
            
    
    
    </div>

                                        <div class="attribute-caption" style="width: 193px">
                
<p><a href="http://www.bostonglobe.com/" target="_blank">Boston Globe website</a> is one of sucessful implementations of responsive web design</p> </div>
         </div>
</div>
</div><p>One of the currently most cited and discussed approaches to solving the mobile problem originated with <a href="http://www.alistapart.com/articles/responsive-web-design/" target="_self">the excellent A List Apart article by Ethan Marcotte</a>. The author argues that in today’s world of almost chaotic change in number and types of devices accessing the web pages it is not enough to limit our approach to desktop (or better said, big screen devices with horizontal resolution usually greater than 1000 px) and standard mobile phone device (small screens with 480 x 320 px&nbsp; or similar resolution). The solution proposed by the author is a combination of fluid grids, flexible images and CSS3 media queries that enable the designer to build layouts that use the same HTML content, but in a dynamic manner so that the web page adapts itself to any device resolution. This “one content to rule them all” solution relies on HTML / CSS client side code and is, in general, agnostic to server side technologies used. eZ Publish, with its clean separation of content and presentation, excels in providing the front side developer with just that kind of clean markup. Just remember not to use fixed pixel sizing in your content and templates!</p><a name="eztoc6608_2" id="eztoc6608_2"></a><h2>Mobile approach no.2: dedicated mobile web sites</h2><p>Contrasting the responsive web pages approach, we have the solution where a “specialized” mobile site is created for the small screen devices. Usually, some kind of device or feature detection is used on the server or the client side and a client accessing the site is redirected to the appropriate version, the mobile one often being set up with a different hostname on the same domain or URL suffix (www.example.com/mobile or m.example.com). Although not as popular nowadays as the responsive solution mentioned above (at least among top-notch web designers and developers, doubtfully if comparing the number of sites in production), we still believe that this solution has its place. The most important factor in choosing which approach to take is to consider the context in which the site will be commonly used. This reasoning has its flaws, as sometimes a user just wants to use the mobile device to access the same content while sitting in front of the TV, but one can argue that benefits of making a specialized site version for the mobile user can make it the right thing to do.</p>
<div class="object-right"><div class="content-view-embed">
<div class="class-image">
    <div class="attribute-image">

    
        
    
                                                                                                                                            <img src="http://www.netgen.hr/var/ezflow_site/storage/images/media/images/result/3535-1-eng-GB/result_medium.png" width="193" height="290"  style="border: 0px solid ;" alt="result" title="result" />
            
    
    
    </div>

                                        <div class="attribute-caption" style="width: 193px">
                
<p>Search results based on distance</p> </div>
         </div>
</div>
</div><p>For example, one of the sites we developed, which is also one of the largest Croatian yellow pages sites, provides radically different experiences when accessed by desktop or mobile device. When a desktop client accesses the site, a rich user experience is provided, which augments content about the businesses in the catalog with additional information such as user-generated data (user comments, rating), image galleries etc. Contrasting this, when a mobile device accesses the same site, the focus is much more on the content and data regarding the business, avoiding all the unnecessary information that could degrade usability&nbsp; when presented on a small screen and possibly using higher-latency, lower bandwidth Internet connections. Additionally, geolocation capabilities, that are available<a href="http://caniuse.com/#feat=geolocation" target="_self">&nbsp;in most of the current mobile browsers</a>, are used to enable simple spatial features such as providing the user a way to quickly find the nearest business (depending on his/hers position), providing routing information, etc.</p><p>On an eZ Publish installation, making a separate siteaccess for a mobile site is a trivial effort, and the only thing we need to do is to ensure that we provide the appropriate device / feature detection. Also, if you want to include geolocation features to your mobile (or desktop) solutions, <a href="http://www.netgen.hr/eng/Blog/Geo-search-with-eZ-Find-search-for-nearest-locations" target="_self">check out our previous post</a>.</p><p>In this post we presented two ways of creating mobile solutions built on eZ Publish, both based on standard web technologies such as HTML, CSS and JavaScript. Opposed to this is the approach which implies using the native mobile application (and not the mobile browser) to access the data stored in the CMS. As we will present in the following blog post, eZ Publish provides all the necessary tools needed in this case as well.</p>
    </div>

    <div class="attribute-url">
	<span>01/17/2012 04:51 am</span> &nbsp; <a href="http://www.netgen.hr/eng/Blog">www.netgen.hr/eng/Blog</a> &nbsp; <a href="/Mirror/Netgen/Going-mobile-with-eZ-Publish">View mirror of item</a> &nbsp; <a href="http://www.netgen.hr/Blog/Going-mobile-with-eZ-Publish">View item</a>
    </div>

        

    </div>
</div>                            
<div class="content-view-line">
    <div class="class-blog-post float-break">

    <div class="attribute-header">
        <h1><a href="/Mirror/Netgen">Netgen</a></h1>
     </div>
    <div class="attribute-header">
        <h2>> <a href="http://www.netgen.hr/Blog/Confessions-of-an-apprentice-Creating-a-custom-page-layout-in-eZ-Publish" title="Confessions of an apprentice: Creating a custom page layout in eZ Publish">Confessions of an apprentice: Creating a custom page layout in eZ  ...</a></h2>
     </div>

    <div class="attribute-byline">
	    </div>

    

    <div class="attribute-body float-break">
      <p><b>&nbsp;</b></p><p>In the last two articles we have covered the creation of a custom module and a custom view of that module. Based on this, you can really customize eZ Publish to your heart's desire. And that's basically the whole point of creating your own websites, isn't it? Now we will make a turn, and look at all the ways you can change layouts on a portion of your website.</p><a name="eztoc6566_1" id="eztoc6566_1"></a><h2>Creation of a custom page layout in eZ Publish</h2><a name="eztoc6566_1_1" id="eztoc6566_1_1"></a><h3>The need for an extra layout</h3><p>Sometimes there arises a need for the developer to create a new page layout inside an existing page for a client. It's almost always based on the need to create a different look and feel on a section of a page which is used for all kinds of purposes (mobile web, different section of a page, etc.). When I say a different look and feel, I'm referring to a radical change in the layout of a page. New header, body, elements, footer, the works. There are actually three ways to do that, and we will cover them all.</p><a name="eztoc6566_1_2" id="eztoc6566_1_2"></a><h3>Overriding a pagelayout template</h3><p>Looking back on<a href="http://www.netgen.hr/eng/Blog/eZ-Publish-CMS-persistent-variables" target="_blank">&nbsp;Ivo Lukač's post on persistent variables</a> a while ago, we can see that it's relatively easy to set them using the<b>&nbsp;ezpagedata_set()</b> operator built in ezwebin. Also, there is a <b>set-block</b> function which we can use to set a persistent variable if the <b>ezpagedata_set()</b> operator is not available. We will show you how to override a layout and define it's persistent variable key, where to put the overridden template, and how to activate it.</p><p>So, open your project, and go to the <b>settings/siteaccess</b> folder. In it, find your siteaccess, and open it, and when you do, you will see, among all of your INI files, one called <b>override.ini.append.php</b>. In this file, if you recall, you override the templates which already exist in your project with custom ones. When you open the file, input the following lines of code:</p><pre>[new_pagelayout]
Source=pagelayout.tpl
MatchFile=new_pagelayout.tpl
Subdir=templates
Match[persistent_variable]=new_pagelayout</pre><p>What did we do here? We created a new persistent variable key in the override.ini, and linked it to a template called <b>new_pagelayout.tpl</b>. Now, in order for the template to work, you need to create it. So, of course, go to your extension. Open the <b>mypage/design/mypage/override/templates/</b> folder and in it, create a file called&nbsp;<b>new_pagelayout.tpl</b>. Bear in mind that this layout has to be set up as your original layout in the extent that you define everything from scratch. If you need a reference, just go to the original layout in your extension (<b>mypage/design/mypage/templates/pagelayout.tpl</b>), and look at how it is set up. After that, clear the INI and override caches and just put whatever elements you'd like in your new layout.</p><p>To determine what templates will use this new layout, enter the following lines at the beginning of your template to set up your persistent variable like so:</p><pre>{ezpagedata_set('new_pagelayout', true())}</pre><p>or:</p><pre>{set scope=global persistent_variable=hash('new_pagelayout', true())}</pre><p>if the <b>ezpagedata_set()</b> operator is not available to you.</p><p>Then you can look at the object using the layout to see your results. It's important to notice that only the view view of the content module is able to set persistent variables in such a manner.</p><p>When you use a persistent variable, you decide which templates are going to use the overridden layout. The same applies to usage with nodes, classes, etc. Which means that, for example, you can create a class (let’s call it custom_class for the purposes of this article), and just use it in your <b>override.ini</b> like so:</p><pre>[new_pagelayout]
Source=pagelayout.tpl
MatchFile=new_pagelayout.tpl
Subdir=templates
Match[class_identifier]=custom_class</pre><p>Now, the <b>new_pagelayout.tpl</b> will be used on every object of the class you’ve defined for this purpose.</p><p>Of course, the overriding doesn’t stop at classes because you can use a big list of override conditions for your new layout. You can find the whole reference fore the override conditions <a href="http://doc.ez.no/eZ-Publish/Technical-manual/4.x/Reference/Template-override-conditions" target="_blank">here</a>.</p><p>After you clear all caches and display an object of your custom class, you will see that the <b>new_pagelayout.tpl</b> will be used! Isn’t that neat? In addition, there is no big hassle in creating new sub-domains, instances of eZ Publish, and whatnot. The stuff just works and that’s the most important thing.</p><p>Also, it’s important to notice that overriding a pagelayout template is only possible with the override rules applicable in the <b>content</b> module. Other modules (e.g. user/login) are unable to apply this type of change to their layouts. On the other hand, no unnecessary strings need to be added to the URL. So I would recommend this method only if you need to change the look and feel of the <b>content</b> module.</p><a name="eztoc6566_1_3" id="eztoc6566_1_3"></a><h3>Setting up a new layout template using the <b>layout</b> module</h3><p>Another way of setting up a new layout for a page is through the <b>layout</b> module. This is a more universal way than the one previously described, because it will work for all of the modules, but you need to have an extra part in the URL.</p><p>If you have examined all of the INI files in your eZ Publish project, you may have noticed that there is a<b>&nbsp;layout.ini</b> file. This file defines all of the different layouts you can use at a given portion of your site. And when you want to use the layout you define in this INI file, you just need to enter the following lines in your address bar:<b>&nbsp;/layout/set/new_pagelayout/url_of_the_node</b>. This gives an order to eZ Publish to use a new layout instead of the default one.</p><p>To set up your layout in the INI, go to your extension. In the <b>mypage/settings</b> folder, create a new PHP file called<b>&nbsp;layout.ini.append.php</b> and put the following settings in it:</p><pre><?php /* #?ini charset="utf-8"?
[new_pagelayout]
PageLayout=new_pagelayout.tpl
*/ ?></pre><p>As you can see, we have set up an alias for our layout in the square brackets and determined that when you type '<b>/layout/set/new_pagelayout</b>', eZ Publish overrides the default pagelayout and uses everything in the template you've accessed in a new layout.</p><p>After you set up your INI, put the <b>new_pagelayout.tpl</b> in the <b>mypage/design/mypage/templates</b> folder and clear all caches. If you then try to access your object in the previously described manner, you will see that your new layout is set up correctly.</p><a name="eztoc6566_1_4" id="eztoc6566_1_4"></a><h3>Setting up a new layout using a new module</h3><p>If you remember, in the article before last we have shown you how to create a new module. This is actually a quick, surefire way to set up a new layout using a module. And it is useful only in the cases when the previous two ways we’ve described are not enough, because you can make custom PHP additions and changes.</p><p>Let's say, for example, that you have created a new module called '<b>get</b>'. In it, you have created a view called '<b>layout</b>'. Now, in the<b>&nbsp;layout.php</b> file in your module, just put following lines of code:</p><pre><?php
$tpl = eZTemplate::factory();
$data = new eZPageData();
$data->modify($tpl, 'ezpagedata', null, null, null, $pagedata);
$tpl->setVariable( 'pagedata', $pagedata );
$tpl->setVariable( 'pagestyle', $pagedata['css_classes'] );
$tpl->setVariable( 'pagedesign', $pagedata['template_look'] );
$tpl->setVariable( 'current_node_id', $pagedata['node_id'] );
$tpl->setVariable( "access_type", $GLOBALS['eZCurrentAccess'] );
$pagelayoutResult = $tpl->fetch( 'design:new_pagelayout.tpl' );
echo( $pagelayoutResult );
eZExecution::cleanExit();
?></pre><p>So, in here we have set up an instance of our template, and set the persistent variables for the view, also, we have set up the CSS files we are going to use, as well as the node id we wish to set for our pagedata. After everything is set up, we fetch our page layout and use it in the view. To access this view, you need to type in the address bar the following: '<b>/get/layout/</b>', and there you have it, a new layout for your page!</p><p>As you can see, setting up a new page layout is really not that big of a deal once you get the hang of it, and this newfound knowledge can really help you in your future projects.</p><p>Until next time, I wish you happy coding,</p><p>Tomislav</p>
    </div>

    <div class="attribute-url">
	<span>01/10/2012 06:36 am</span> &nbsp; <a href="http://www.netgen.hr/eng/Blog">www.netgen.hr/eng/Blog</a> &nbsp; <a href="/Mirror/Netgen/Confessions-of-an-apprentice-Creating-a-custom-page-layout-in-eZ-Publish">View mirror of item</a> &nbsp; <a href="http://www.netgen.hr/Blog/Confessions-of-an-apprentice-Creating-a-custom-page-layout-in-eZ-Publish">View item</a>
    </div>

        

    </div>
</div>                            
<div class="content-view-line">
    <div class="class-blog-post float-break">

    <div class="attribute-header">
        <h1><a href="/Mirror/Netgen">Netgen</a></h1>
     </div>
    <div class="attribute-header">
        <h2>> <a href="http://www.netgen.hr/Blog/2011%21-What-a-year-for-Netgen.-Lot-of-expectation-for-2012-too" title="2011! What a year for Netgen. Lot of expectation for 2012 too">2011! What a year for Netgen. Lot of expectation for 2012 too</a></h2>
     </div>

    <div class="attribute-byline">
	    </div>

    

    <div class="attribute-body float-break">
      <p>So once a year CEO-s of a big companies write a letter to their shareholders with year summary and the direction where the company is heading the next year, but as we are not a corporation (yet) I'll just write a simple blog post with just one business fact. The most important one.</p><a name="eztoc6548_0_1" id="eztoc6548_0_1"></a><h3>2011 summary</h3><p>Running a business requires lot of different skills and one of them is the ability to always "keep your eye on the ball". But once in a while you need to look at the big picture, to check if you achieved your goals or not, where are you heading, etc. One opportunity for a clean look is the financial year closure and in Croatia this is always in line with the calendar year end. Which is good as you can think about the whole thing during holidays :).</p><p>Was year 2011 successful for business? The rough estimates show that we achieved more than 60% cash flow growth with just 12% more man power (comparing to 2010). Enough said. It is hard to pin point exactly the reason for such a growth but here are few good guesses:</p>
<ul>

<li>getting more and more stronger in our niche (<a href="http://ez.no" target="_self">eZ Publish CMS</a>) by doing more complicated projects, gaining experience and expertize</li>

<li>a lot more external engagement and building credibility: writing blog posts, <a href="http://share.ez.no" target="_self">share.ez.no</a> activity, using social tools (<a href="https://twitter.com/#!/netgentweets" target="_self">twitter</a>, <a href="https://plus.google.com/b/117089428399193516011/" target="_self">google+</a>)</li>

<li>being present on events like<a href="http://www.netgen.hr/eng/Blog/eZ-Winter-Conference-2011-in-Nice-Summary" target="_self">&nbsp;eZ Publish Winter Conference in Nice</a> and <a href="http://www.netgen.hr/eng/Blog/eZ-Conference-2011-in-London-a-Late-Recap" target="_self">eZ Publish Summer Conference in London</a></li>

<li>50% of the cash flow was export</li>

</ul>
<p>I would like to thank all Netgen employees who made it possible (ordered alphabetically): Davorka, Dinko, Edi, Igor, Marin, Mario, Marija, Marko, Milan, Petar, Viktor, Vjeran, 2x Tomislav. Also, a great thanks to our partner companies: <a href="http://www.infomar.hr" target="_self">www.infomar.hr</a>, <a href="http://www.effectiva.hr" target="_self">www.effectiva.hr</a>, <a href="http://www.bambibold.hr" target="_self">www.bambibold.hr</a>, <a href="http://www.soma.hr" target="_self">www.soma.hr</a>, <a href="http://www.xvision.org" target="_self">www.xvision.org</a>, <a href="http://www.creativenights.com" target="_self">www.creativenights.com</a>, <a href="http://www.blagonic.com" target="_self">www.blagonic.com</a>, we love you guys and girls.&nbsp;</p><p>That growth enabled us to&nbsp;hire more people and establish an office in <a href="http://en.wikipedia.org/wiki/Osijek" target="_blank">Osijek</a>. We are counting on them in the following year to keep on growing.</p><p>Few more things worth of noting:</p>
<ul>

<li>we created a new Netgen logo and a new web design. Still some work to do here but the overall look and feel is here to stay</li>

<li>we organized <a href="http://www.netgen.hr/eng/Blog/A-meeting-of-Croatian-eZ-Publish-developers-in-a-pub-Summary" target="_self">the first eZ Publish Croatia meetup</a>&nbsp;(just thinking on how to repeat that this year)</li>

<li>we are now covering 3 biggest theaters in Croatia with our&nbsp;<a href="http://www.netgen.hr/eng/Theatron" target="_self">box office solution</a>, web site and web shop&nbsp;</li>

<li>in March we co-founded the&nbsp;<a href="http://www.exportboomers.com/" target="_blank">Croatian Independent Software Exporters</a>&nbsp;association. The association currently has 85 members, really impressive.</li>

<li>started interviewing some eZ people on our blog (next interview coming soon)</li>

</ul>
<a name="eztoc6548_0_2" id="eztoc6548_0_2"></a><h3>Some expectation for 2012</h3><p>While revising the elapsed year, naturally, expectations for the following year come to mind.</p><p>So what to expect?&nbsp;Lets put it very short (in order of importance):</p>
<ol>

<li>more engagement</li>

<li>more work</li>

<li>more income</li>

</ol>
<p>Enough said.</p><p>Meet us at <a href="http://www.netgen.hr/eng/eZ%20Publish Partner Conference in Lisabon" target="_self">eZ Publish&nbsp;Partner Conference in Lisabon</a>&nbsp;or on some of the following #CISEXFriday meetings.</p><p>Btw, Happy New Year :)</p>
    </div>

    <div class="attribute-url">
	<span>01/05/2012 11:08 am</span> &nbsp; <a href="http://www.netgen.hr/eng/Blog">www.netgen.hr/eng/Blog</a> &nbsp; <a href="/Mirror/Netgen/2011!-What-a-year-for-Netgen.-Lot-of-expectation-for-2012-too">View mirror of item</a> &nbsp; <a href="http://www.netgen.hr/Blog/2011%21-What-a-year-for-Netgen.-Lot-of-expectation-for-2012-too">View item</a>
    </div>

        

    </div>
</div>                            
<div class="content-view-line">
    <div class="class-blog-post float-break">

    <div class="attribute-header">
        <h1><a href="/Mirror/Netgen">Netgen</a></h1>
     </div>
    <div class="attribute-header">
        <h2>> <a href="http://www.netgen.hr/Blog/Dear-Santa" title="Dear Santa...">Dear Santa...</a></h2>
     </div>

    <div class="attribute-byline">
	    </div>

    

    <div class="attribute-body float-break">
      <p>Couple of months ago, Netgen crew decided to give its best in one particular task; we wanted to get in touch and try to agree a visit to Zagreb from one famous northerner. It took a lot of diplomacy skills and even a long trip to the foothill of Korvatunturi, near Rovaniemi in the Lapland, to get his confirmation! We were all very happy when the day came, but, as you can imagine, the youngest of us were especially joyful...</p><p>Inside info: Only one elf accompanied Mr. Claus and he came in a strange looking grey car(!) which was referred to as 'The arrow'. The elf mysteriously vanished from all the pictures taken that night...</p><p>Couple of pics... (Mr. Claus was not harmed in the making of last one)</p><table class="default" cellpadding="2" cellspacing="0" width="100%" summary="Pictures"><tr><td valign="top">  
<div class=""><div class="content-view-embed">
<div class="class-image">
    <div class="attribute-image">

    
        
    
                                                                                                                                            <img src="http://www.netgen.hr/var/ezflow_site/storage/images/media/images/100_2066/6506-1-cro-HR/100_2066_medium.jpg" width="200" height="150"  style="border: 0px solid ;" alt="100_2066" title="100_2066" />
            
    
    
    </div>

     </div>
</div>
</div>
  </td><td valign="top">  
<div class=""><div class="content-view-embed">
<div class="class-image">
    <div class="attribute-image">

    
        
    
                                                                                                                                            <img src="http://www.netgen.hr/var/ezflow_site/storage/images/media/images/p1010551_1/6514-1-cro-HR/P1010551_1_medium.jpg" width="200" height="150"  style="border: 0px solid ;" alt="P1010551_1" title="P1010551_1" />
            
    
    
    </div>

     </div>
</div>
</div>
  </td><td valign="top">  
<div class=""><div class="content-view-embed">
<div class="class-image">
    <div class="attribute-image">

    
        
    
                                                                                                                                            <img src="http://www.netgen.hr/var/ezflow_site/storage/images/media/images/p1010573_1/6522-1-cro-HR/P1010573_1_medium.jpg" width="200" height="150"  style="border: 0px solid ;" alt="P1010573_1" title="P1010573_1" />
            
    
    
    </div>

     </div>
</div>
</div>
  </td></tr><tr class="bglight"><td valign="top">  
<div class=""><div class="content-view-embed">
<div class="class-image">
    <div class="attribute-image">

    
        
    
                                                                                                                                            <img src="http://www.netgen.hr/var/ezflow_site/storage/images/media/images/p1010606_1/6534-1-cro-HR/P1010606_1_medium.jpg" width="200" height="267"  style="border: 0px solid ;" alt="P1010606_1" title="P1010606_1" />
            
    
    
    </div>

     </div>
</div>
</div>
  </td><td valign="top">  
<div class=""><div class="content-view-embed">
<div class="class-image">
    <div class="attribute-image">

    
        
    
                                                                                                                                            <img src="http://www.netgen.hr/var/ezflow_site/storage/images/media/images/p1010578_1/6526-1-cro-HR/P1010578_1_medium.jpg" width="200" height="267"  style="border: 0px solid ;" alt="P1010578_1" title="P1010578_1" />
            
    
    
    </div>

     </div>
</div>
</div>
  </td><td valign="top">  
<div class=""><div class="content-view-embed">
<div class="class-image">
    <div class="attribute-image">

    
        
    
                                                                                                                                            <img src="http://www.netgen.hr/var/ezflow_site/storage/images/media/images/p1010601_1/6530-1-cro-HR/P1010601_1_medium.jpg" width="200" height="267"  style="border: 0px solid ;" alt="P1010601_1" title="P1010601_1" />
            
    
    
    </div>

     </div>
</div>
</div>
  </td></tr>
</table>

    </div>

    <div class="attribute-url">
	<span>12/19/2011 05:52 am</span> &nbsp; <a href="http://www.netgen.hr/eng/Blog">www.netgen.hr/eng/Blog</a> &nbsp; <a href="/Mirror/Netgen/Dear-Santa">View mirror of item</a> &nbsp; <a href="http://www.netgen.hr/Blog/Dear-Santa">View item</a>
    </div>

        

    </div>
</div>                            
<div class="content-view-line">
    <div class="class-blog-post float-break">

    <div class="attribute-header">
        <h1><a href="/Mirror/Netgen">Netgen</a></h1>
     </div>
    <div class="attribute-header">
        <h2>> <a href="http://www.netgen.hr/Blog/Confessions-of-an-apprentice-eZ-Publish-Views-revealed" title="Confessions of an apprentice: eZ Publish Views revealed">Confessions of an apprentice: eZ Publish Views revealed</a></h2>
     </div>

    <div class="attribute-byline">
	    </div>

    

    <div class="attribute-body float-break">
      <p>In this article we will talk about the views of the modules in eZ Publish and look at the basic options you can access and modify. For that purpose, we’ll create a basic view with a few simple options which we’ll use to better explain the functionalities of a single view script, and, ultimately, we’ll link it to a template.</p><a name="eztoc6484_1" id="eztoc6484_1"></a><h2>eZ Publish Views</h2><p>Since we’ve created the <b>mymodule</b> module in the last article with a single view which redirects to the <a href="http://doc.ez.no" target="_blank">doc.ez.no</a>&nbsp;website, it would be a shame if we’d leave it at that. Each module can be comprised of one or more views, so let’s create a new view in our module. Go to the <b>extension/mypage/modules/mymodule</b> folder and open the<b>&nbsp;module.php</b> file. In it you’ll see our basic <b>redirect.php</b> view already defined. Let’s say that we’d like something more than just simple redirection. Therefore, we’ll define a new view in our module. Let’s call it <b>myview</b>, just to make thing simple. We will also create a form in this view, which will post the data from the form to the same view, and display it accordingly. To manage this whole operation and still be in the confines of our site, we’ll link our view to a template which will be created just for this purpose.</p><a name="eztoc6484_1_1" id="eztoc6484_1_1"></a><h3>Ordered and unordered parameters of a view</h3><p>To be able to successfully manage the task at hand, you should understand the concept of ordered and unordered parameters of a view. So, what are the ordered and unordered parameters?</p><p>You have probably already seen, once or twice, a part of an eZ Publish site looking like this: mysite.com/content/view/full/2. We’ll break this URL down again, but now for the specific purpose of understanding the ordered parameters of a view. So, as you can see, the first three parts of a URL are, after the last article, pretty easy to read, I think. You have the <b>name_of_page/module_name/view_name</b>. What are actually the <b>full/2</b> parts? Those are called the ordered parameters of a view. Why is there a need for such parameters? Well, mainly because of easier readability. Of course, one may wonder why would there be such a need. Because of the GET and POST data. You see, sometimes it’s not really readable when you get something like this:<b>&nbsp;?view_mode=full&node_id=2</b>. But it’s not just a matter of a link being easy on the eyes, it’s a matter of security as well. You’ll see what I mean if you read on.</p><p>Of course, as I mentioned, there are unordered parameters as well, and they look like this: <b>name_of_page/module_name/view_name/(param_1)/value_1/(param_2)/value_2</b>. The main difference between these parameters is that the ordered parameters have to be input in just the right order for your site not to display a kernel error or display the wrong data. The unordered parameters, on the other hand, can be input in any order possible, and it won’t affect the overall result of the data displayed by the view. Also, when listing the unordered parameters, they need to be listed behind the ordered ones in the view.</p><p>The best practice here would be to actually use the ordered parameters as main parameters used by the view for handling crucial data of the view, and to use unordered parameters as helper parameters in displaying that data. But, the ordered and unordered parameters of a view are not a must. You don’t need to use them in order for your view to work, and indeed, some of the views don’t use any of these parameters, as we’ve seen in the last article. Now, on to the main topic of the article, actually creating our new view.</p><a name="eztoc6484_1_2" id="eztoc6484_1_2"></a><h3>Setting up the view</h3><p>Remember how we set up the view in the last article? This won’t be any different, just a bit extended. So, create a new view in the <b>module.php</b> file of your extension like so:</p><pre>$ViewList['myview']= array(
'script' => 'myview.php',
'functions' => array( 'read' ),
'params' => array( 'node_id' ),
'unordered_params' => array ( 'offset' => 'Offset' )
);
</pre><p>And define the <b>read</b> function here like so:</p><pre>$FunctionList['read'] = array();</pre><p>So, what did we do here? We have defined a script name for our view, declared a policy function we wish for our view to use, some ordered parameters, in our case just one, the <b>node_id</b>, and some unordered parameters, in our case <b>offset</b>. After that, we’ve defined the <b>read</b> function which makes the view accessible to all users with proper rights.</p><p>After we’ve set up a view in such a manner, we need to create the PHP script for it. You probably already know the drill, but I’ll repeat it here again. Create the <b>myview.php</b> script in the same folder. Put in the following lines of code:</p><pre><?php
$http = eZHTTPTool::instance();
$Module = $Params['Module'];
$nodeID = 0;
if ( $http->hasPostVariable( 'node_id' ) )
{
$nodeID = (int) $http->postVariable( 'node_id' );
$Module->redirectToView( 'myview', array($nodeID) );
}
if ( isset( $Params['node_id'] ) )
{
$nodeID = (int) $Params['node_id'];
}
$offset = (int) $Params['Offset'];
$tpl = eZTemplate::factory();
$tpl->setVariable( 'view_parameters', array( 'offset' => $offset ) );
$Result = array();
$Result['content'] = $tpl->fetch('design:mymodule/myview.tpl');
$Result['path'] = array( array( 'url' => 'mymodule/myview',&nbsp;'text' => 'My view' ) );
?></pre><p>In this script we’ve done all of the back-end preparations for our view. So, we’ve defined some basic variables which almost every view uses. We have instanced the<b>&nbsp;eZHTTPTool</b> which is a very crafty and versatile tool which helps you with all the user data you wish your view to handle.</p><p>After that, we’ve defined the <b>$Module</b> variable which is actually the module itself. Since it’s already an <b>eZModule</b> object, we can easily access the methods of the <b>eZModule</b> class. Then, we’ve created the <b>$nodeID</b> variable which we’ll use to store the node ID the user passes from the template view to the system in order to manipulate it. Subsequently, we have linked the<b>&nbsp;$nodeID</b> variable to the ordered parameter called <b>node_id</b>, and, we’ve declared that we want to redirect our script to the same view, but with an ordered parameter, i.e. our node ID.</p><p>Then we’ve instanced our template using the<b>&nbsp;factory()</b> method in the <b>eZTemplate</b> class. This is needed to link the view script to the template. We’ve set the <b>$offset</b> variable as an unordered parameter we wish our module to use. We declared that we want to set an additional variable in our template. It is called <b>view_parameters</b> and our offset will be in it.</p><p>We’ve created the <b>$Result</b> array which handles all of our content, and with the optional fields, we can define the path and name of the template our view will use. And then we’ve declared that we wish our view to use the <b>module/myview.tpl</b> template which is located in the <b>design/mypage/templates</b> folder of our extension for the content of this view. And in the end, we’ve determined a path which will be set in our page as the path for the view of this module.</p><a name="eztoc6484_1_3" id="eztoc6484_1_3"></a><h3>Setting up the Roles and Policies</h3><p>Well, your view is set up, but, it is still not accessible to everybody. We’ll correct that now. Go to the Administration interface, and click on the <b>User accounts</b> tab. On the left-hand menu, under the <b>Access Control</b> section, you have the <b>Roles and policies</b> link. After you click on that, you’ll see all of the User Groups you have on your page. Since this is a pretty simple module, with a pretty simple view, and we wish for everyone to see our masterwork, we’ll grant full access to the <b>read</b> function of the module to the Anonymous group.</p><p>So, click on <b>Anonymous</b>, then on the<b>&nbsp;Edit</b> button, and after that click on <b>New policy</b>. In here, you have the policy wizard. In the dropdown menus, for the Module, select <b>mymodule</b>, and for the Function, select<b>&nbsp;read</b>. After that, click on <b>Grant full access</b>. And you’ve set up your module so that anyone can read it.</p>
<div class=""><div class="content-view-embed">
<div class="class-image">
    <div class="attribute-image">

    
        
    
                                                                                                                                            <img src="http://www.netgen.hr/var/ezflow_site/storage/images/blog/confessions-of-an-apprentice-ez-publish-views-revealed/administration-interface-roles-and-policies-wizard/6510-1-cro-HR/Administration-Interface-Roles-and-Policies-Wizard_large.png" width="360" height="111"  style="border: 0px solid ;" alt="Administration Interface Roles and Policies Wizard" title="Administration Interface Roles and Policies Wizard" />
            
    
    
    </div>

                                        <div class="attribute-caption" style="width: 360px">
                
<p>Administration Interface Roles and Policies Wizard</p> </div>
         </div>
</div>
</div><a name="eztoc6484_1_4" id="eztoc6484_1_4"></a><h3>Setting up the template</h3><p>Wait a minute, you’ll say, where is the view template? Don’t worry, we’ll create one now. So, as we’ve already declared the position of our template, let’s navigate to that location, shall we? Go to <b>extension/mypage/design/mypage/templates/mymodule</b> folder. Create a new template called <b>myview.tpl</b> in it. This is the template we’ll use to actually display some data on the page for the user to manipulate with.</p><p>Input some data in the newly created view like so:</p><pre>{def $module_parameters = module_params()}
<form action="" method="post">
<label for="node_id">Enter a node ID</label>
<input type="text" name="node_id" id="node_id" />
<input type="submit" value="Search for node" />
</form>
{if is_set($module_parameters.parameters.node_id)}
{def $node_fetch = fetch('content', 'node', hash( 'node_id', $module_parameters.parameters.node_id ) ) }
{if is_set($node_fetch)}
The name of the node is: {$node_fetch.name}<br />
The class of the object in the node is: {$node_fetch.object.class_name}
{else}
The node does not exist!
{/if}
{/if}</pre><p>As you can see, there is a nifty little operator called <b>module_params()</b> created in eZ Publish which takes the name of the module, the view of the module, and it’s ordered parameters and puts it in a neat associative array. We have linked that array to the <b>$module_parameters</b> variable in the template, so we can access our ordered parameters which we’ve defined during the creation of the view. Then, we’ve created a form which we’ll use to actually set an ordered parameter from. After that, if the <b>node_id</b> parameter of the view is not set, nothing will happen, but if it is, we’ll try to <b>fetch</b> the node ID which was input in the form. If the node ID doesn’t exist, we’ll output the appropriate message, and if it does exist, we’ll display the name of the node, and the class of the object which is encapsulated by the node.</p><p>And if you enter number 2, for example, in the created form, you’ll see that the module redirected us to the same view, but the URL will take on the next form: <b>mypage/mymodule/myview/2</b> - which means that we’ve determined our ordered parameters successfully.</p><p>And that’s about it regarding this article. It was a long one, and I hope you were able to keep up with everything, but I also hope that you’ll be able to create your own modules and appropriate views for them after this article and the last one. Of course, the learning part doesn’t stop here, as you can expand the current view to do even more. Since we’ve started off simple, we’ll end on this note.</p><p>Until next time, I wish you happy coding,</p><p>Tomislav</p>
    </div>

    <div class="attribute-url">
	<span>12/19/2011 05:09 am</span> &nbsp; <a href="http://www.netgen.hr/eng/Blog">www.netgen.hr/eng/Blog</a> &nbsp; <a href="/Mirror/Netgen/Confessions-of-an-apprentice-eZ-Publish-Views-revealed">View mirror of item</a> &nbsp; <a href="http://www.netgen.hr/Blog/Confessions-of-an-apprentice-eZ-Publish-Views-revealed">View item</a>
    </div>

        

    </div>
</div>                            
<div class="content-view-line">
    <div class="class-blog-post float-break">

    <div class="attribute-header">
        <h1><a href="/Mirror/Netgen">Netgen</a></h1>
     </div>
    <div class="attribute-header">
        <h2>> <a href="http://www.netgen.hr/Blog/Confessions-of-an-apprentice-Creating-eZ-Publish-modules" title="Confessions of an apprentice: Creating eZ Publish modules">Confessions of an apprentice: Creating eZ Publish modules</a></h2>
     </div>

    <div class="attribute-byline">
	    </div>

    

    <div class="attribute-body float-break">
      <p>In the last article we have created our own template operator, introducing a new functionality to our eZ Publish extension and, ultimately, to the whole site. But what happens if we want to introduce a whole set of functionalities wrapped in a neat package? The answer is: modules. Creation of a new module is relatively easy and painless, and it can really help out in situations ranging from a simple modification to the existing code (for example, if you have a segment of a site which does one thing, and you need such a segment to do the same thing but with different parameters), to setting up a whole range of features you won’t find in the regular extensions or the modules found in the eZ Publish installation.</p><a name="eztoc6448_1" id="eztoc6448_1"></a><h2>Creation of modules in eZ Publish</h2><a name="eztoc6448_1_1" id="eztoc6448_1_1"></a><h3>What is a module anyway?</h3><p>Well, the easiest explanation would be: a module is a set of views. You know views, you’ve probably overridden the templates for a view or two. The basic modules are defined in the <b>module.ini</b> file which is located in the <b>settings</b> folder of your eZ Publish installation. And if you open that file, you’ll see a list of all the modules which are installed by default. Just be sure not to modify that file since modifying it will screw up your installation. Consider yourself warned. So, you can see a pretty big list of modules such as <b>class</b>, <b>collaboration</b>, <b>error</b>, <b>package</b>, <b>pdf</b>, etc. And even though all of those modules are useful and needed, the actual user only sees a handful of those.</p><p>You’re probably wondering how a person even accesses a module. The short and simple answer is: through the url. What you see on a page in the address bar is actually just the url aliases of the parts of a page you are accessing. In actuality, what you access is a module, and a view defined in that module, with some parameters defined for good measure. The first module, and probably the most commonly used is the <b>content</b> module. When you open a page for the first time, you’re actually viewing the following url: <b>http://name_of_page/content/view/full/2</b>. The<b>&nbsp;/content/view/full/2</b> is something probably unfamiliar to those who are beginners in eZ Publish, so I’ll break it down for easy explanation. The /<b>content</b>/ part is the name of the module, /<b>view</b>/ is the name of the view, /<b>full</b>/ is the view mode, and /<b>2</b> is the node id accessed. How do we know this? Where is this module located? Why, in the kernel, of course!</p><p>If you look at the kernel folder, you’ll see a folder in it for every module available. Each of these folders has a set of PHP scripts which relate to each and every view of a module, and the <b>module.php</b> file which relates to the module in question. Now, this file is the key file in the creation of a module. It defines all of the views and the parameters this module will have. And some of the PHP files which relate to views have a template file in the templates folder of the design of your page. As you can see, the views are PHP scripts which handle certain actions a website can perform (like a JSON interface or redirections, just to name a few), and not all of them have a template assigned to them. It is also important to keep in mind that a template is just a visual representation of a view. And a module is an HTTP interface which provides a grouping of such views.</p><p>You’re probably scratching your head now, re-reading this last paragraph, and trying to figure it out. Have no fear, and read on, we’ll tackle the creation of modules which will most definitely clear out some of the issues.</p><a name="eztoc6448_1_2" id="eztoc6448_1_2"></a><h3>Creation of a module</h3><p>The first thing you need to set up is the ini file. For the remainder of this series, I’ll assume you have a test installation of eZ Publish, and that it’s called mypage with an already set up extension of the same name. You need to put a new appendix to the existing module.ini file in the settings folder of your extension. Create a new file called <b>module.ini.append.php</b> in your <b>/extension/mypage/settings </b>folder, and put the following lines of code in it:</p><pre>[ModuleSettings]
ExtensionRepositories[]=mypage
ModuleList[]=mymodule</pre><p>With this, you have declared that you want your extension to contain additional modules, and you’ve declared a name for your module. Also, since you’ve put this module just in the <b>/extension/mypage/settings </b>folder, and not in any of the folders in the <b>/extension/mypage/settings/siteaccess </b>folder, this module will be accessible from every siteaccess.</p><p>After that, you need to actually define the module. And in that purpose, create the next folder: <b>/extension/mypage/modules/mymodule/</b> and put a PHP file in it which you’ll name <b>module.php</b>. Also, open this file, and put the following lines of code in it:</p><pre>$Module = array( 'name' => 'mymodule', 'variable_params' => false, 'ui_component_match' => 'module' );
$ViewList = array();
$FunctionList = array()
</pre><p>As you can see, we have created three arrays here which define the settings and data for the module. The $Module array relates to the module itself, it’s name, and some general parameters we wish the module to use. The $ViewList array is an array composed of the definitions of views you wish the module to handle, and last but not least, $FunctionList is a list of policy functions you wish the module to use. Which is basically assignment to different groups of users who can handle the views. So, let’s fill some of those arrays with data, shall we?</p><p>To make things simple, I’ll create a view which will redirect a user to the <a href="http://doc.ez.no/" target="_blank">doc.ez.no</a> website, that is, to the documentation page for eZ Publish. I still won’t teach you how to actually assign a template to this view, because it will be a simple redirection, so we won’t need a template, only the PHP script to do its stuff.</p><p>Under the line in which you’ve defined the $ViewList array, put in the following lines of code:</p><pre>$ViewList['redirect']= array(
'script' => 'redirect.php'
);</pre><p>What we’ve basically done here is, we’ve defined a view called redirect, and a script for that view which will be performed after we access the url: http://mypage/mymodule/redirect, and it will redirect us to the <a href="http://doc.ez.no/" target="_blank">doc.ez.no</a> website.</p><p>The next step is the creation of mentioned script. So, create a file in the same folder called redirect.php and put the following lines of code inside:</p><pre><?php
eZHTTPTool::redirect('http://doc.ez.no');
?>
</pre><p>Now, bear in mind, since we didn’t put any policy functions in our view, it will only work if you’re logged in as the administrator of the page. For a view to function properly, you need to define additional parameters which will further extend all the possibilities a view can perform. But, all of those will be covered in the next article when we’ll talk about setting up a view, and defining functions of that view. We’ll cover the template part of the view also.</p><p>Clear the Global cache, and go to the url <b>http://mypage/mymodule/redirect</b> and hopefully, if you set up everything as described, you will be redirected to the <a href="http://doc.ez.no/" target="_blank">doc.ez.no</a> website.</p><p>As you can see, the actual creation of a module is not that hard, and it’s really a matter of your needs. And as I said before, you can rely on modules to do some additional stuff your default installation of eZ Publish doesn’t cover. With that said, look forward to the next article when we break down a view, and define parameters of that view.</p><p>
Until next time, I wish you happy coding,<br />Tomislav</p>
    </div>

    <div class="attribute-url">
	<span>12/05/2011 04:03 am</span> &nbsp; <a href="http://www.netgen.hr/eng/Blog">www.netgen.hr/eng/Blog</a> &nbsp; <a href="/Mirror/Netgen/Confessions-of-an-apprentice-Creating-eZ-Publish-modules">View mirror of item</a> &nbsp; <a href="http://www.netgen.hr/Blog/Confessions-of-an-apprentice-Creating-eZ-Publish-modules">View item</a>
    </div>

        

    </div>
</div>                        
            

<div class="pagenavigator">
<p>

           <span class="previous"><a href="/Mirror/Netgen/(offset)/90"><span class="text">&laquo;&nbsp;Previous</span></a></span>
       
            <span class="next"><a href="/Mirror/Netgen/(offset)/110"><span class="text">Next&nbsp;&raquo;</span></a></span>
      
<span class="pages">
                      <span class="other"><a href="/Mirror/Netgen">1</a></span>
                              <span class="other"><a href="/Mirror/Netgen/(offset)/10">2</a></span>
                              <span class="other"><a href="/Mirror/Netgen/(offset)/20">3</a></span>
                              <span class="other"><a href="/Mirror/Netgen/(offset)/30">4</a></span>
                              <span class="other"><a href="/Mirror/Netgen/(offset)/40">5</a></span>
                              <span class="other"><a href="/Mirror/Netgen/(offset)/50">6</a></span>
                              <span class="other"><a href="/Mirror/Netgen/(offset)/60">7</a></span>
                              <span class="other"><a href="/Mirror/Netgen/(offset)/70">8</a></span>
                              <span class="other"><a href="/Mirror/Netgen/(offset)/80">9</a></span>
                              <span class="other"><a href="/Mirror/Netgen/(offset)/90">10</a></span>
            
        <span class="current">11</span>

                      <span class="other"><a href="/Mirror/Netgen/(offset)/110">12</a></span>
            
</span>

</p>
<div class="break"></div>
</div>

 

                </div></div></div>
                <div class="border-bl"><div class="border-br"><div class="border-bc"></div></div></div>
                </div>
            </div>
        </div>

        <div class="extrainfo-column-position">
            <div class="extrainfo-column">
                <div class="border-box">
                <div class="border-tl"><div class="border-tr"><div class="border-tc"></div></div></div>
                <div class="border-ml"><div class="border-mr"><div class="border-mc float-break">
                                                <div class="attribute-tag-cloud">
                        <p>
                            
                        </p>
                        </div>

                        <div class="attribute-description">
                            
                        </div>

                        <div class="attribute-tags">
                            <h1>Tags</h1>
                            <ul>
                                                        </ul>
                        </div>

                        <div class="attribute-archive">
                            <h1>Archive</h1>
                            <ul>
                                                            <li><a href="/Mirror/Netgen/(month)/8/(year)/2014" title="">August 2014</a></li>
                                                            <li><a href="/Mirror/Netgen/(month)/7/(year)/2014" title="">July 2014</a></li>
                                                            <li><a href="/Mirror/Netgen/(month)/5/(year)/2014" title="">May 2014</a></li>
                                                            <li><a href="/Mirror/Netgen/(month)/4/(year)/2014" title="">April 2014</a></li>
                                                            <li><a href="/Mirror/Netgen/(month)/3/(year)/2014" title="">March 2014</a></li>
                                                            <li><a href="/Mirror/Netgen/(month)/2/(year)/2014" title="">February 2014</a></li>
                                                            <li><a href="/Mirror/Netgen/(month)/1/(year)/2014" title="">January 2014</a></li>
                                                            <li><a href="/Mirror/Netgen/(month)/12/(year)/2013" title="">December 2013</a></li>
                                                            <li><a href="/Mirror/Netgen/(month)/11/(year)/2013" title="">November 2013</a></li>
                                                            <li><a href="/Mirror/Netgen/(month)/10/(year)/2013" title="">October 2013</a></li>
                                                            <li><a href="/Mirror/Netgen/(month)/9/(year)/2013" title="">September 2013</a></li>
                                                            <li><a href="/Mirror/Netgen/(month)/8/(year)/2013" title="">August 2013</a></li>
                                                            <li><a href="/Mirror/Netgen/(month)/7/(year)/2013" title="">July 2013</a></li>
                                                            <li><a href="/Mirror/Netgen/(month)/6/(year)/2013" title="">June 2013</a></li>
                                                            <li><a href="/Mirror/Netgen/(month)/5/(year)/2013" title="">May 2013</a></li>
                                                            <li><a href="/Mirror/Netgen/(month)/4/(year)/2013" title="">April 2013</a></li>
                                                            <li><a href="/Mirror/Netgen/(month)/3/(year)/2013" title="">March 2013</a></li>
                                                            <li><a href="/Mirror/Netgen/(month)/2/(year)/2013" title="">February 2013</a></li>
                                                            <li><a href="/Mirror/Netgen/(month)/1/(year)/2013" title="">January 2013</a></li>
                                                            <li><a href="/Mirror/Netgen/(month)/11/(year)/2012" title="">November 2012</a></li>
                                                            <li><a href="/Mirror/Netgen/(month)/9/(year)/2012" title="">September 2012</a></li>
                                                            <li><a href="/Mirror/Netgen/(month)/8/(year)/2012" title="">August 2012</a></li>
                                                            <li><a href="/Mirror/Netgen/(month)/7/(year)/2012" title="">July 2012</a></li>
                                                            <li><a href="/Mirror/Netgen/(month)/6/(year)/2012" title="">June 2012</a></li>
                                                            <li><a href="/Mirror/Netgen/(month)/5/(year)/2012" title="">May 2012</a></li>
                                                            <li><a href="/Mirror/Netgen/(month)/4/(year)/2012" title="">April 2012</a></li>
                                                            <li><a href="/Mirror/Netgen/(month)/3/(year)/2012" title="">March 2012</a></li>
                                                            <li><a href="/Mirror/Netgen/(month)/2/(year)/2012" title="">February 2012</a></li>
                                                            <li><a href="/Mirror/Netgen/(month)/1/(year)/2012" title="">January 2012</a></li>
                                                            <li><a href="/Mirror/Netgen/(month)/12/(year)/2011" title="">December 2011</a></li>
                                                            <li><a href="/Mirror/Netgen/(month)/11/(year)/2011" title="">November 2011</a></li>
                                                            <li><a href="/Mirror/Netgen/(month)/10/(year)/2011" title="">October 2011</a></li>
                                                            <li><a href="/Mirror/Netgen/(month)/9/(year)/2011" title="">September 2011</a></li>
                                                            <li><a href="/Mirror/Netgen/(month)/8/(year)/2011" title="">August 2011</a></li>
                                                            <li><a href="/Mirror/Netgen/(month)/6/(year)/2011" title="">June 2011</a></li>
                                                            <li><a href="/Mirror/Netgen/(month)/5/(year)/2011" title="">May 2011</a></li>
                                                            <li><a href="/Mirror/Netgen/(month)/4/(year)/2011" title="">April 2011</a></li>
                                                        </ul>
                        </div>

                        <!--START: CAL NAV -->
                                                                                                                                                            
<div class="calendar">
<div class="calendar-tl"><div class="calendar-tr"><div class="calendar-bl"><div class="calendar-br">
<div class="content">

<div class="month">
<div class="previous">
<p><a href="/Mirror/Netgen/(month)/7/(year)/2014" title="Previous month">&#8249;&#8249;<span class="hide"> Previous month</span></a></p>
</div>
<div class="next">
<p><a href="/Mirror/Netgen/(month)/9/(year)/2014" title="Next month"><span class="hide">Next month </span>&#8250;&#8250;</a></p>
</div>
<h2>August&nbsp;2014</h2>
</div>

<div class="table">
<table cellspacing="0" border="0" summary="Calendar">
<tr class="top">
    <th class="left">Mon</th>
    <th>Tue</th>
    <th>Wed</th>
    <th>Thu</th>
    <th>Fri</th>
    <th>Sat</th>
    <th class="right">Sun</th>
</tr>                <tr class="">
                                            <td class="left">&nbsp;</td>
                                <td>&nbsp;</td>
                                <td>&nbsp;</td>
                                <td>&nbsp;</td>
                            <td class=" ">
            1
        </td>
                            <td class=" ">
            2
        </td>
                                        <td class="  right">
            3
        </td>
                </tr>
                        <tr class="">
                    <td class="  left">
            4
        </td>
                            <td class=" ">
            5
        </td>
                            <td class=" ">
            6
        </td>
                            <td class=" ">
            7
        </td>
                            <td class=" ">
            8
        </td>
                            <td class=" ">
            9
        </td>
                                        <td class="  right">
            10
        </td>
                </tr>
                        <tr class="">
                    <td class="  left">
            11
        </td>
                            <td class=" ">
            12
        </td>
                            <td class=" ">
            13
        </td>
                            <td class=" ">
            14
        </td>
                            <td class=" ">
            15
        </td>
                            <td class=" ">
            16
        </td>
                                        <td class="  right">
            17
        </td>
                </tr>
                        <tr class="">
                    <td class="  left">
            <em><a href="/Mirror/Netgen/(day)/18/(month)/8/(year)/2014">18</a></em>
        </td>
                            <td class=" ">
            19
        </td>
                            <td class=" ">
            20
        </td>
                            <td class=" ">
            <em><a href="/Mirror/Netgen/(day)/21/(month)/8/(year)/2014">21</a></em>
        </td>
                            <td class=" ">
            22
        </td>
                            <td class="currentselected today">
            23
        </td>
                                        <td class="  right">
            24
        </td>
                </tr>
                        <tr class="bottom">
                    <td class="  left">
            25
        </td>
                            <td class=" ">
            26
        </td>
                            <td class=" ">
            27
        </td>
                            <td class=" ">
            28
        </td>
                            <td class=" ">
            29
        </td>
                            <td class=" ">
            30
        </td>
                                        <td class="  right">
            31
        </td>
                </tr>
        </table>
</div>

</div>
</div></div></div></div>
</div>

<!-- END: CAL NAV -->                </div></div></div>
                <div class="border-bl"><div class="border-br"><div class="border-bc"></div></div></div>
                </div>
            </div>
        </div>
    </div>
</div>";s:15:"view_parameters";a:5:{s:6:"offset";s:3:"100";s:4:"year";b:0;s:5:"month";b:0;s:3:"day";b:0;s:10:"namefilter";b:0;}s:4:"path";a:3:{i:0;a:4:{s:4:"text";s:12:"eZ Ecosystem";s:3:"url";s:20:"/content/view/full/2";s:9:"url_alias";s:0:"";s:7:"node_id";s:1:"2";}i:1;a:4:{s:4:"text";s:6:"Mirror";s:3:"url";s:22:"/content/view/full/216";s:9:"url_alias";s:6:"Mirror";s:7:"node_id";s:3:"216";}i:2;a:4:{s:4:"text";s:6:"Netgen";s:3:"url";b:0;s:9:"url_alias";b:0;s:7:"node_id";s:3:"228";}}s:10:"title_path";a:3:{i:0;a:4:{s:4:"text";s:12:"eZ Ecosystem";s:3:"url";s:20:"/content/view/full/2";s:9:"url_alias";s:0:"";s:7:"node_id";s:1:"2";}i:1;a:4:{s:4:"text";s:6:"Mirror";s:3:"url";s:22:"/content/view/full/216";s:9:"url_alias";s:6:"Mirror";s:7:"node_id";s:3:"216";}i:2;a:3:{s:4:"text";s:6:"Netgen";s:3:"url";b:0;s:9:"url_alias";b:0;}}s:10:"section_id";s:1:"1";s:7:"node_id";s:3:"228";s:15:"navigation_part";s:23:"ezcontentnavigationpart";s:12:"content_info";a:24:{s:9:"object_id";s:3:"226";s:7:"node_id";s:3:"228";s:14:"parent_node_id";s:3:"216";s:8:"class_id";s:2:"19";s:16:"class_identifier";s:4:"blog";s:9:"remote_id";s:32:"7f359aaa74ea9081f7b9d7c57013072d";s:14:"node_remote_id";s:32:"80d65711644b755185f988f146faca0d";s:6:"offset";i:100;s:8:"viewmode";s:4:"full";s:26:"navigation_part_identifier";s:23:"ezcontentnavigationpart";s:10:"node_depth";s:1:"3";s:9:"url_alias";s:13:"Mirror/Netgen";s:16:"current_language";s:6:"eng-US";s:13:"language_mask";s:1:"2";s:12:"main_node_id";s:3:"228";s:19:"main_node_url_alias";b:0;s:19:"persistent_variable";a:2:{s:9:"left_menu";b:0;s:10:"extra_menu";b:0;}s:11:"class_group";b:0;s:5:"state";a:1:{i:2;s:1:"1";}s:16:"state_identifier";a:1:{i:0;s:18:"ez_lock/not_locked";}s:15:"parent_class_id";s:1:"1";s:23:"parent_class_identifier";s:6:"folder";s:21:"parent_node_remote_id";s:32:"418ada46ecd2d42b7744e9cee6c51085";s:23:"parent_object_remote_id";s:32:"5b6a5a0179108fb40b786874ab09d743";}s:13:"template_list";a:3:{i:0;s:64:"extension/ezecosystem/design/eze/templates/tagcloud/tagcloud.tpl";i:1;s:61:"design/standard/templates/content/datatype/view/ezxmltext.tpl";i:2;s:66:"extension/ezwebin/design/ezwebin/templates/parts/blog/calendar.tpl";}s:9:"cache_ttl";i:-1;}