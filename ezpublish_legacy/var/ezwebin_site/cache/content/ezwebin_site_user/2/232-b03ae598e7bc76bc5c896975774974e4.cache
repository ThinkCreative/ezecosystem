a:10:{s:7:"content";s:27563:"
<div class="class-blog extrainfo">
    <div class="columns-blog float-break">
        <div class="main-column-position">
            <div class="main-column float-break">
                <div class="border-box">
                <div class="border-tl"><div class="border-tr"><div class="border-tc"></div></div></div>
                <div class="border-ml"><div class="border-mr"><div class="border-mc float-break">
            
                                            
<div class="content-view-line">
    <div class="class-blog-post float-break">

    <div class="attribute-header">
        <h1><a href="/Mirror/Nabil-Alimi">Nabil Alimi</a></h1>
     </div>
    <div class="attribute-header">
        <h2>> <a href="http://ez.ryba.eu/index.php/ez_publish/hosting/installing_ez_publish_4_0_on_home_pl_servers" title="Installing eZ Publish 4.0 on home.pl servers">Installing eZ Publish 4.0 on home.pl servers</a></h2>
     </div>

    <div class="attribute-byline">
	    </div>

    

    <div class="attribute-body float-break">
      
<p>
<b>Home.pl </b>is Poland's largest hosting provider. Despite the fact that they do not have eZ Publish-dedicated services and their machines do not exactly match its standard requirements (FreeBSD, PHP in CGI mode), it is possible to successfully deploy eZ 4.0 installation in their shared hosting environment. Since many people seem to have problems getting through the installation wizard, here's some tips.
</p>
<h5>Organization</h5>
<p>
Put the files in a subdirectory and use the <b>subserver functionality</b> (in other words: point the domain to that subdirectory). This is not only because of some possible namespace conflicts (0:/bin is reserved by the system), but also for good organization and easy management. Since a subserver cannot reach above its own root, <b>remember </b>to create a /tmp dir for any temporary files.
</p>
<h5>Wizard problems</h5>
<p>
If you try to install version 4.0 from scratch, you may encounter some early problems. This is due to the fact that some systems functions are called during setup tests that cannot handle an error in this environment (which is FreeBSD-like by the way). You can easily cope with that by simply commenting out a line in /kernel/setup/ezsetuptests.php:
</p>
<div class="code">

<p>
$ginfo = posix_getgrgid( posix_getgid() ); // around line 593
</p>

</div>

<p>
This is practically never used again, so don't worry, you may revert the changes after installation, or even leave it like that.
</p>
<h5>Limitations</h5>
<p>
For a number of reasons, this hosting will only serve a number of use scenarios. The major problem is a script-like CRON, which works on PHP rights, which means it has the same limitations. It will be impossible to safely run large, exhausting notifications or maintenance scripts... Lack of CLI makes it even harder, and can only be partially compensated by enabled system() PHP function. Still, with a little practice it is possible to tame it, especially with servers' above-average efficiency.
</p>

    </div>

    <div class="attribute-url">
	<span>02/24/2008 12:49 pm</span> &nbsp; <a href="http://ez.ryba.eu">ez.ryba.eu</a> &nbsp; <a href="/Mirror/Nabil-Alimi/Installing-eZ-Publish-4.0-on-home.pl-servers">View mirror of item</a> &nbsp; <a href="http://ez.ryba.eu/index.php/ez_publish/hosting/installing_ez_publish_4_0_on_home_pl_servers">View item</a>
    </div>

        

    </div>
</div>                            
<div class="content-view-line">
    <div class="class-blog-post float-break">

    <div class="attribute-header">
        <h1><a href="/Mirror/Nabil-Alimi">Nabil Alimi</a></h1>
     </div>
    <div class="attribute-header">
        <h2>> <a href="http://ez.ryba.eu/index.php/ez_publish/extensions/brainstorm_ini_priority_vs_extension_settings" title="Brainstorm: *.ini priority vs. extension settings">Brainstorm: *.ini priority vs. extension settings</a></h2>
     </div>

    <div class="attribute-byline">
	    </div>

    

    <div class="attribute-body float-break">
      
<p>

Just looking at the priority that the settings files follow:<br />
 <br />
Gunnstein wrote at <a href="http://ez.no/doc/ez_publish/technical_manual/4_0/concepts_and_basics/configuration/site_management" title="Site management" target="_blank">http://ez.no/doc/ez_pub...site_management</a><br /> 
</p>
<div class="code">

<p>

1. Default configuration settings (/settings/*.ini)<br />
2. Active extension siteaccesses (/extension/*/settings/siteaccess/[name_of_siteaccess]/*.ini.append.php)<br />
3. Siteaccesses (/settings/siteaccess/[name_of_siteaccess]/*.ini.append.php)<br />
4. Active extensions (/extension/*/settings/*.ini.append.php)<br />5. Global overrides (/settings/override/*.ini.append.php) 
</p>

</div>

<p>

 <br />It seems like the main/siteaccess/override model for settings files and its advantages weren't introduced to extensions' engine. Here's some issues I see:
</p>

<p>
1) Let's call it <b>convenience and flexibility</b>: One great feature of the three-step system (and - as far as I understand - one of its key functions) is that we have untouched original *.ini files with all/default settings present, the rest are siteaccess-dedicated or global overrides. This is a great in case of any upgrades, modifications, or simply for reference. I don't see this possibility for extension settings (unless we move the overrides of custom *ini files to the global overrides, but that isn't that convenient we have 10 or 20 extensions...).
</p>

<p>
2) <b>Security</b>: This actually results from the above. If there is no general override, all your general custom settings will most probably be kept in the main *.ini file. That may include project-dedicated values, passwords, options, etc. The file should then always be called *.ini.append.php, which is easy to forget about.
</p>

<p>
3) <b>Rules</b>: While with the general settings siteaccesses overrule general files and global overrides overrule all of them, the rules seem less clear with extension settings... that includes both the priorities and the names (look at the security point).
</p>

<p>
Here's what it could look like (just a quick idea):
</p>

<ol>

<li>Default settings [/settings/*.ini]</li>

<li>Default extension settings [/extension/EXT/settings/*.ini] <i>(only for custom *.ini files)</i></li>

<li>Extension siteaccesses [/extension/EXT/settings/siteaccess/SITEACCESS/*.ini.append.php]</li>

<li>Siteaccesses [/settings/siteaccess/SITEACCESS/*.ini.append.php]</li>

<li>Extension overrides [/extension/EXT/settings/override/*.ini.append.php] <i>(for custom *.ini files as well as other *.ini files)</i></li>

<li>Global overrides [/settings/override/*.ini.append.php]</li>

</ol>

<p>
Of course, that would require little changes to directory structure, might be difficult.
</p>

<p>

I put this on the forum, haven't given this as much thought as I would like to, so... let's see what happens ;)<br /><a href="http://ez.no/developer/forum/suggestions/ini_priority_vs_extension_settings" title="Brainstorm: *.ini priority vs. extension settings" target="_blank">http://ez.no/developer/forum/suggestions/ini_priority_vs_extension_settings</a>
</p>

    </div>

    <div class="attribute-url">
	<span>02/19/2008 02:14 pm</span> &nbsp; <a href="http://ez.ryba.eu">ez.ryba.eu</a> &nbsp; <a href="/Mirror/Nabil-Alimi/Brainstorm-.ini-priority-vs.-extension-settings">View mirror of item</a> &nbsp; <a href="http://ez.ryba.eu/index.php/ez_publish/extensions/brainstorm_ini_priority_vs_extension_settings">View item</a>
    </div>

        

    </div>
</div>                            
<div class="content-view-line">
    <div class="class-blog-post float-break">

    <div class="attribute-header">
        <h1><a href="/Mirror/Nabil-Alimi">Nabil Alimi</a></h1>
     </div>
    <div class="attribute-header">
        <h2>> <a href="http://ez.ryba.eu/index.php/ez_publish/random_thoughts/re_is_ez_publish_4_0_like_microsoft_vista" title="Re: Is eZ Publish 4.0 like Microsoft Vista?">Re: Is eZ Publish 4.0 like Microsoft Vista?</a></h2>
     </div>

    <div class="attribute-byline">
	    </div>

    

    <div class="attribute-body float-break">
      
<p>
<i>Inspired by Bruce Morrison's post in his blog: </i><a href="http://suffandnonsense.blogspot.com/2008/02/is-ez-publish-40-like-microsoft-vista.html" title="Is eZ Publish 4.0 like Microsoft Vista?" target="_blank"><i>http://suffandnonsense.blogspot.com/2008/02/is...</i></a>
</p>
<h5>eZ Publish 4.0</h5>
<p>
I kind of understand the disappointment with minor revolution of the current big version 4.0, although I had known (more or less) what to expect when I was awaiting it few months back. You can ask yourself: was PHP5 more of <b>an improvement, or maybe a necessity</b>? If the latter, the smaller was the step ahead, indeed. Nevertheless, <b>I am very glad this step was made</b>, no matter what the version is called, for reasons that must be obvious. Back to the expectations, I can only imagine how 3.x introduction was different (greater) to 4.x, because I've only known eZ Publish since 3.8.x or so (BTW: have to admit I gave up after several attempts with 3.5... it beat me!).
</p>
<h5>eZ Publish 4.0 maintenance mode, 5.0 eZ Components-based rebuild</h5>
<p>
Bruce's suggestion is to put eZ Publish 4.0 at its rather stable state into feature freeze mode, while concentrating efforts on taking full advantage of the maturing <a href="http://ezcomponents.org" title="eZ Components" target="_blank">eZ Components</a> to produce the next big version (5.0) from scratch. I have to say that I like this idea for similar reasons: 
</p>

<ul>

<li>There's always a risk of ending up with Vista-like model,</li>

<li>It will probably take equally long (or even longer) to incorporate majority of eZ Components into eZ Publish (with compromises possible/necessary on the way), than it would have taken to build a completely fresh thing,</li>

<li>Past limitations and problems will probably become even more concreted,</li>

<li>I believe that eZ Components with all their features would prolong the application's lifespan, secure its potential and make future port to PHP6 easier (I'm not sure if another platform "rewriting" would be a good idea).</li>

</ul>

<p>
There's another thing, but it deserves to be covered in its own paragraph.
</p>
<h5>Solid content model vs. feature richness</h5>
<p>
In my comparatively short experience with eZ Publish, I have already dug deep enough to see its few weaknesses, especially regarding the content and storage models. Don't get me wrong, by no means would I call eZ Publish weak, it's just that it has its limitations defined and there are only so many things you can do with it without hacking or severely extending.
</p>

<p>
Now, I do understand how big part various "rich" features play in the eZ business model and in those of many eZ partners. For example, extensions such as <a href="http://ez.no/ezflow" title="eZ Flow" target="_blank">eZ Flow</a> or Web interfaces that make it possible to have an advanced out-of-the-box product with time required for implementation significantly reduced. Having seen how business-oriented eZ people are, I do not expect this direction to be given up at any stage (and I like that).
</p>

<p>
However, I hope that that direction <b>does not prevent from improving the application</b> at its core, that is the foundation for all eZ business after all. Unlike presentation layer or even more advanced extensions, which can be developed independently, core upgrades would be rather difficult to be introduced by means of hacking the kernel. I'd like to be optimistic, but don't see <a href="http://ez.no/developer/forum/suggestions/integrity_flag_element_in_the_class_definition#msg157819" title="Alternative storage models" target="_blank">alternative storage models</a> or <a href="http://ez.no/developer/forum/suggestions/integrity_flag_element_in_the_class_definition#msg157819" title="Advanced class features" target="_blank">advanced class features</a> coming any time soon. New rebuild could be an ideal opportunity to make eZ Publish even more versatile and fit to solve even more advanced content management tasks (and not only!).
</p>
<h5>Summing up</h5>
<p>
It doesn't seem like this issue is up for a discussion, but I haven't heard anything official on eZ Publish 5.0, yet. So, maybe it is not too late ;)
</p>

<p>
If you ask me, I think I could live in this 4.0 feature freeze mode... if what I was waiting for was a completely new eZ Publish 5.0 in a year or two, with even greater core features and as few compromises as possible.
</p>

    </div>

    <div class="attribute-url">
	<span>02/16/2008 11:23 pm</span> &nbsp; <a href="http://ez.ryba.eu">ez.ryba.eu</a> &nbsp; <a href="/Mirror/Nabil-Alimi/Re-Is-eZ-Publish-4.0-like-Microsoft-Vista">View mirror of item</a> &nbsp; <a href="http://ez.ryba.eu/index.php/ez_publish/random_thoughts/re_is_ez_publish_4_0_like_microsoft_vista">View item</a>
    </div>

        

    </div>
</div>                            
<div class="content-view-line">
    <div class="class-blog-post float-break">

    <div class="attribute-header">
        <h1><a href="/Mirror/Nabil-Alimi">Nabil Alimi</a></h1>
     </div>
    <div class="attribute-header">
        <h2>> <a href="http://ez.ryba.eu/index.php/ez_publish/lab/require_flag_on_the_object_attribute_level" title="&quot;Require flag&quot; on the object attribute level">&quot;Require flag&quot; on the object attribute level</a></h2>
     </div>

    <div class="attribute-byline">
	    </div>

    

    <div class="attribute-body float-break">
      
<p>

Lately we've been having this discussion with André about different suggestions regarding ways to improve eZ content model:<br /><a href="http://ez.no/developer/forum/suggestions/integrity_flag_element_in_the_class_definition" title="eZ Publish require the attribute flag" target="_blank">http://ez.no/developer/forum/suggestions/in...</a>
</p>

<p>
It was started by my own suggestion to introduce an additional flag that would sort of require objects attributes to be present (or, in other words, impossible to remove from the presentation/XHTML layer). And that actually resulted from my early eZ days questions on how does eZ Publish actually deal with missing attributes...
</p>
<h5>Back to the additional "require attribute flag"</h5>
<ol>

<li><i>"Required" flag, that we have today, suggests by semantics that the attribute is required, however, that is not so. I hope I was the only user not to go in depth with this issue, however I expect otherwise. Today's "required" should in my opinion be called "Value required" or "Require value", because that's what the checked flag actually causes.</i></li>

<li><i>Why isn't the default behavior of attribute validation such that all attributes are required to be present?</i></li>

<li><i>Doesn't lack of all/any of the solution ideas mentioned above (or other) make the editing process vulnerable to any manipulation of the presentation layer? Isn't that comparatively easy to simply omit all uncomfortable attributes, for example datatype-based CAPTCHA, limits, identifiers, etc.?</i></li>

<li><i>"Require all required" as a class attribute/flag actually doesn't make much sense with current "Required" meaning. What would it mean? Require all required values? This is why I suggest that there should be a separation of "required flags". We could leave today's required as "Require value" flag, as I suggested above. Then, there should be an additional flag that would decide whether the attribute itself is required to be present in the editing process. This would be much more flexible than earlier "require all required" and at the same time seems to make that idea useless.</i></li>

</ol>
<h5>Discovery</h5>
<p>
Well, I finally found some time to look at it again, especially into the eZ Publish kernel. I followed the path that an attribute takes from the <b>edit view</b> all the way to the <b>datatype itself</b>. Actually, I found out that no matter what you do, no matter how you manipulate the presentation layer,<b> the attributes of a content class always reach input validation function in their datatype</b>. So it is up to the given datatype to take further steps, but it's already a good news: <b>it is possible to force attributes without any kernel/lib modifications</b>! Here's an example (ezstring datatype):
</p>
<div class="code">

<p>

function validateObjectAttributeHTTPInput( $http, $base, $contentObjectAttribute )<br />
{<br />
 if ( $http->hasPostVariable( $base . '_ezstring_data_text_' . $contentObjectAttribute->attribute( 'id' ) ) )<br />
 {<br />
 // THE REST OF THE CODE<br />
 }<br />
 $contentObjectAttribute->setValidationError( ezi18n( 'kernel/classes/datatypes', 'Attribute missing in the presentation layer!' ) );<br />
 return eZInputValidator::STATE_INVALID;<br />}
</p>

</div>

<p>
A quick update on my four points above: I still believe the new flag would be a useful solution. I still believe there's space for both "required flags". I'm still not sure why checking an attributes presence is not default behavior in most (or all) out-of-the-box datatypes. But at least now I have it under control! ;)
</p>

<p>
And here's how the new flag could work:
</p>
<div class="code">

<p>

function validateObjectAttributeHTTPInput( $http, $base, $contentObjectAttribute )<br />
{<br />
 if ( $http->hasPostVariable( $base . '_ezstring_data_text_' . $contentObjectAttribute->attribute( 'id' ) ) )<br />
 {<br />
 // THE REST OF THE CODE <br />
 // Including use of: $contentObjectAttribute->validateIsRequired()... <br />
 }<br />
 elseif( $contentObjectAttribute->attributeIsRequired() )<br />
 {<br />
 $contentObjectAttribute->setValidationError( ezi18n( 'kernel/classes/datatypes', 'Attribute missing in the presentation layer!' ) );<br />
 return eZInputValidator::STATE_INVALID;<br />
 }<br />}
</p>

</div>

<p>
What do you think?
</p>

    </div>

    <div class="attribute-url">
	<span>02/10/2008 01:02 pm</span> &nbsp; <a href="http://ez.ryba.eu">ez.ryba.eu</a> &nbsp; <a href="/Mirror/Nabil-Alimi/Require-flag-on-the-object-attribute-level">View mirror of item</a> &nbsp; <a href="http://ez.ryba.eu/index.php/ez_publish/lab/require_flag_on_the_object_attribute_level">View item</a>
    </div>

        

    </div>
</div>                            
<div class="content-view-line">
    <div class="class-blog-post float-break">

    <div class="attribute-header">
        <h1><a href="/Mirror/Nabil-Alimi">Nabil Alimi</a></h1>
     </div>
    <div class="attribute-header">
        <h2>> <a href="http://ez.ryba.eu/index.php/ez_publish/extensions/ez_my_collected_info_manage_your_objects_collections" title="eZ My Collected Info - manage your objects' collections">eZ My Collected Info - manage your objects' collections</a></h2>
     </div>

    <div class="attribute-byline">
	    </div>

    

    <div class="attribute-body float-break">
      
<p>
<b>eZ My Collected Info</b> extension gives front-end access to one's collected info. The ownership of the collections is determined based on the ownership of the content object that collected the information. In other words, it is <b>not who sent the information</b>, but <b>whose object it was sent to</b>, that is considered the owner, and thus can browse/read, and optionally delete.
</p>

<p>

The extension makes it possible to browse though the collections by class and then by object (a tree-like menu is provided for easy access). A <b>detailed class-level configuration</b> is possible to allow/disallow collection deletion, custom identifiers, and custom/default templates.<br />
 <br />
 The extension comes with two module views and two access functions for a flexible management. The standard browsing view can be accessed through: <i>/index.php/siteaccess/mycollectedinfo/browse</i><br />
 <br /> Read the <i>settings/mycollectedinfo.ini</i> file's comments for more information.
</p>

<p>
You can download the extension from: <a href="http://ez.no/developer/contribs/hacks/ez_my_collected_info" title="eZ My Collected Info" target="_blank">http://ez.no/developer/contribs/hacks/ez_my_collected_info</a>
</p>

    </div>

    <div class="attribute-url">
	<span>02/06/2008 04:32 pm</span> &nbsp; <a href="http://ez.ryba.eu">ez.ryba.eu</a> &nbsp; <a href="/Mirror/Nabil-Alimi/eZ-My-Collected-Info-manage-your-objects-collections">View mirror of item</a> &nbsp; <a href="http://ez.ryba.eu/index.php/ez_publish/extensions/ez_my_collected_info_manage_your_objects_collections">View item</a>
    </div>

        

    </div>
</div>                        
                  

 

                </div></div></div>
                <div class="border-bl"><div class="border-br"><div class="border-bc"></div></div></div>
                </div>
            </div>
        </div>

        <div class="extrainfo-column-position">
            <div class="extrainfo-column">
                <div class="border-box">
                <div class="border-tl"><div class="border-tr"><div class="border-tc"></div></div></div>
                <div class="border-ml"><div class="border-mr"><div class="border-mc float-break">
                                                <div class="attribute-tag-cloud">
                        <p>
                            
                        </p>
                        </div>

                        <div class="attribute-description">
                            
                        </div>

                        <div class="attribute-tags">
                            <h1>Tags</h1>
                            <ul>
                                                        </ul>
                        </div>

                        <div class="attribute-archive">
                            <h1>Archive</h1>
                            <ul>
                                                            <li><a href="/Mirror/Nabil-Alimi/(month)/6/(year)/2008" title="">June 2008</a></li>
                                                            <li><a href="/Mirror/Nabil-Alimi/(month)/5/(year)/2008" title="">May 2008</a></li>
                                                            <li><a href="/Mirror/Nabil-Alimi/(month)/4/(year)/2008" title="">April 2008</a></li>
                                                            <li><a href="/Mirror/Nabil-Alimi/(month)/2/(year)/2008" title="">February 2008</a></li>
                                                            <li><a href="/Mirror/Nabil-Alimi/(month)/1/(year)/2008" title="">January 2008</a></li>
                                                            <li><a href="/Mirror/Nabil-Alimi/(month)/12/(year)/2007" title="">December 2007</a></li>
                                                        </ul>
                        </div>

                        <!--START: CAL NAV -->
                                                                                                                                                                                                                                                                                                                                                                                                
<div class="calendar">
<div class="calendar-tl"><div class="calendar-tr"><div class="calendar-bl"><div class="calendar-br">
<div class="content">

<div class="month">
<div class="previous">
<p><a href="/Mirror/Nabil-Alimi/(month)/1/(year)/2008" title="Previous month">&#8249;&#8249;<span class="hide"> Previous month</span></a></p>
</div>
<div class="next">
<p><a href="/Mirror/Nabil-Alimi/(month)/3/(year)/2008" title="Next month"><span class="hide">Next month </span>&#8250;&#8250;</a></p>
</div>
<h2>February&nbsp;2008</h2>
</div>

<div class="table">
<table cellspacing="0" border="0" summary="Calendar">
<tr class="top">
    <th class="left">Mon</th>
    <th>Tue</th>
    <th>Wed</th>
    <th>Thu</th>
    <th>Fri</th>
    <th>Sat</th>
    <th class="right">Sun</th>
</tr>                <tr class="">
                                            <td class="left">&nbsp;</td>
                                <td>&nbsp;</td>
                                <td>&nbsp;</td>
                                <td>&nbsp;</td>
                            <td class="currentselected ">
            1
        </td>
                            <td class=" ">
            2
        </td>
                                        <td class="  right">
            3
        </td>
                </tr>
                        <tr class="">
                    <td class="  left">
            4
        </td>
                            <td class=" ">
            5
        </td>
                            <td class=" ">
            <em><a href="/Mirror/Nabil-Alimi/(day)/6/(month)/2/(year)/2008">6</a></em>
        </td>
                            <td class=" ">
            7
        </td>
                            <td class=" ">
            8
        </td>
                            <td class=" ">
            9
        </td>
                                        <td class="  right">
            <em><a href="/Mirror/Nabil-Alimi/(day)/10/(month)/2/(year)/2008">10</a></em>
        </td>
                </tr>
                        <tr class="">
                    <td class="  left">
            11
        </td>
                            <td class=" ">
            12
        </td>
                            <td class=" ">
            13
        </td>
                            <td class=" ">
            14
        </td>
                            <td class=" ">
            15
        </td>
                            <td class=" ">
            <em><a href="/Mirror/Nabil-Alimi/(day)/16/(month)/2/(year)/2008">16</a></em>
        </td>
                                        <td class="  right">
            17
        </td>
                </tr>
                        <tr class="">
                    <td class="  left">
            18
        </td>
                            <td class=" ">
            <em><a href="/Mirror/Nabil-Alimi/(day)/19/(month)/2/(year)/2008">19</a></em>
        </td>
                            <td class=" ">
            20
        </td>
                            <td class=" ">
            21
        </td>
                            <td class=" ">
            22
        </td>
                            <td class=" ">
            23
        </td>
                                        <td class="  right">
            <em><a href="/Mirror/Nabil-Alimi/(day)/24/(month)/2/(year)/2008">24</a></em>
        </td>
                </tr>
                        <tr class="bottom">
                    <td class="  left">
            25
        </td>
                            <td class=" ">
            26
        </td>
                            <td class=" ">
            27
        </td>
                            <td class=" ">
            28
        </td>
                            <td class=" ">
            29
        </td>
                                <td>&nbsp;</td>
                                <td class="right">&nbsp;</td>
                                    </tr>
        </table>
</div>

</div>
</div></div></div></div>
</div>

<!-- END: CAL NAV -->                </div></div></div>
                <div class="border-bl"><div class="border-br"><div class="border-bc"></div></div></div>
                </div>
            </div>
        </div>
    </div>
</div>";s:15:"view_parameters";a:5:{s:6:"offset";b:0;s:4:"year";s:4:"2008";s:5:"month";s:1:"2";s:3:"day";b:0;s:10:"namefilter";b:0;}s:4:"path";a:3:{i:0;a:4:{s:4:"text";s:12:"eZ Ecosystem";s:3:"url";s:20:"/content/view/full/2";s:9:"url_alias";s:0:"";s:7:"node_id";s:1:"2";}i:1;a:4:{s:4:"text";s:6:"Mirror";s:3:"url";s:22:"/content/view/full/216";s:9:"url_alias";s:6:"Mirror";s:7:"node_id";s:3:"216";}i:2;a:4:{s:4:"text";s:11:"Nabil Alimi";s:3:"url";b:0;s:9:"url_alias";b:0;s:7:"node_id";s:3:"232";}}s:10:"title_path";a:3:{i:0;a:4:{s:4:"text";s:12:"eZ Ecosystem";s:3:"url";s:20:"/content/view/full/2";s:9:"url_alias";s:0:"";s:7:"node_id";s:1:"2";}i:1;a:4:{s:4:"text";s:6:"Mirror";s:3:"url";s:22:"/content/view/full/216";s:9:"url_alias";s:6:"Mirror";s:7:"node_id";s:3:"216";}i:2;a:3:{s:4:"text";s:11:"Nabil Alimi";s:3:"url";b:0;s:9:"url_alias";b:0;}}s:10:"section_id";s:1:"1";s:7:"node_id";s:3:"232";s:15:"navigation_part";s:23:"ezcontentnavigationpart";s:12:"content_info";a:24:{s:9:"object_id";s:3:"230";s:7:"node_id";s:3:"232";s:14:"parent_node_id";s:3:"216";s:8:"class_id";s:2:"19";s:16:"class_identifier";s:4:"blog";s:9:"remote_id";s:32:"eb3ec397bd26e4854a462950ecee1c9d";s:14:"node_remote_id";s:32:"8f726b195ee3331aefd32c363f97ace6";s:6:"offset";b:0;s:8:"viewmode";s:4:"full";s:26:"navigation_part_identifier";s:23:"ezcontentnavigationpart";s:10:"node_depth";s:1:"3";s:9:"url_alias";s:18:"Mirror/Nabil-Alimi";s:16:"current_language";s:6:"eng-US";s:13:"language_mask";s:1:"2";s:12:"main_node_id";s:3:"232";s:19:"main_node_url_alias";b:0;s:19:"persistent_variable";a:2:{s:9:"left_menu";b:0;s:10:"extra_menu";b:0;}s:11:"class_group";b:0;s:5:"state";a:1:{i:2;s:1:"1";}s:16:"state_identifier";a:1:{i:0;s:18:"ez_lock/not_locked";}s:15:"parent_class_id";s:1:"1";s:23:"parent_class_identifier";s:6:"folder";s:21:"parent_node_remote_id";s:32:"418ada46ecd2d42b7744e9cee6c51085";s:23:"parent_object_remote_id";s:32:"5b6a5a0179108fb40b786874ab09d743";}s:13:"template_list";a:3:{i:0;s:64:"extension/ezecosystem/design/eze/templates/tagcloud/tagcloud.tpl";i:1;s:61:"design/standard/templates/content/datatype/view/ezxmltext.tpl";i:2;s:66:"extension/ezwebin/design/ezwebin/templates/parts/blog/calendar.tpl";}s:9:"cache_ttl";i:-1;}